{"db":[{"meta":{"exported_on":1600766610327,"version":"3.32.1"},"data":{"migrations_lock":[{"lock_key":"km01","locked":0,"acquired_at":"2020-09-21 02:46:31","released_at":"2020-09-21 02:46:34"}],"migrations":[{"id":1,"name":"1-create-tables.js","version":"init","currentVersion":"3.32"},{"id":2,"name":"2-create-fixtures.js","version":"init","currentVersion":"3.32"},{"id":3,"name":"1-post-excerpt.js","version":"1.3","currentVersion":"3.32"},{"id":4,"name":"1-codeinjection-post.js","version":"1.4","currentVersion":"3.32"},{"id":5,"name":"1-og-twitter-post.js","version":"1.5","currentVersion":"3.32"},{"id":6,"name":"1-add-backup-client.js","version":"1.7","currentVersion":"3.32"},{"id":7,"name":"1-add-permissions-redirect.js","version":"1.9","currentVersion":"3.32"},{"id":8,"name":"1-custom-template-post.js","version":"1.13","currentVersion":"3.32"},{"id":9,"name":"2-theme-permissions.js","version":"1.13","currentVersion":"3.32"},{"id":10,"name":"1-add-webhooks-table.js","version":"1.18","currentVersion":"3.32"},{"id":11,"name":"1-webhook-permissions.js","version":"1.19","currentVersion":"3.32"},{"id":12,"name":"1-remove-settings-keys.js","version":"1.20","currentVersion":"3.32"},{"id":13,"name":"1-add-contributor-role.js","version":"1.21","currentVersion":"3.32"},{"id":14,"name":"1-multiple-authors-DDL.js","version":"1.22","currentVersion":"3.32"},{"id":15,"name":"1-multiple-authors-DML.js","version":"1.22","currentVersion":"3.32"},{"id":16,"name":"1-update-koenig-beta-html.js","version":"1.25","currentVersion":"3.32"},{"id":17,"name":"2-demo-post.js","version":"1.25","currentVersion":"3.32"},{"id":18,"name":"1-rename-amp-column.js","version":"2.0","currentVersion":"3.32"},{"id":19,"name":"2-update-posts.js","version":"2.0","currentVersion":"3.32"},{"id":20,"name":"3-remove-koenig-labs.js","version":"2.0","currentVersion":"3.32"},{"id":21,"name":"4-permalink-setting.js","version":"2.0","currentVersion":"3.32"},{"id":22,"name":"5-remove-demo-post.js","version":"2.0","currentVersion":"3.32"},{"id":23,"name":"6-replace-fixture-posts.js","version":"2.0","currentVersion":"3.32"},{"id":24,"name":"1-add-sessions-table.js","version":"2.2","currentVersion":"3.32"},{"id":25,"name":"2-add-integrations-and-api-key-tables.js","version":"2.2","currentVersion":"3.32"},{"id":26,"name":"3-insert-admin-integration-role.js","version":"2.2","currentVersion":"3.32"},{"id":27,"name":"4-insert-integration-and-api-key-permissions.js","version":"2.2","currentVersion":"3.32"},{"id":28,"name":"5-add-mobiledoc-revisions-table.js","version":"2.2","currentVersion":"3.32"},{"id":29,"name":"1-add-webhook-columns.js","version":"2.3","currentVersion":"3.32"},{"id":30,"name":"2-add-webhook-edit-permission.js","version":"2.3","currentVersion":"3.32"},{"id":31,"name":"1-add-webhook-permission-roles.js","version":"2.6","currentVersion":"3.32"},{"id":32,"name":"1-add-members-table.js","version":"2.8","currentVersion":"3.32"},{"id":33,"name":"1-remove-empty-strings.js","version":"2.13","currentVersion":"3.32"},{"id":34,"name":"1-add-actions-table.js","version":"2.14","currentVersion":"3.32"},{"id":35,"name":"2-add-actions-permissions.js","version":"2.14","currentVersion":"3.32"},{"id":36,"name":"1-add-type-column-to-integrations.js","version":"2.15","currentVersion":"3.32"},{"id":37,"name":"2-insert-zapier-integration.js","version":"2.15","currentVersion":"3.32"},{"id":38,"name":"1-add-members-perrmissions.js","version":"2.16","currentVersion":"3.32"},{"id":39,"name":"1-normalize-settings.js","version":"2.17","currentVersion":"3.32"},{"id":40,"name":"2-posts-add-canonical-url.js","version":"2.17","currentVersion":"3.32"},{"id":41,"name":"1-restore-settings-from-backup.js","version":"2.18","currentVersion":"3.32"},{"id":42,"name":"1-update-editor-permissions.js","version":"2.21","currentVersion":"3.32"},{"id":43,"name":"1-add-member-permissions-to-roles.js","version":"2.22","currentVersion":"3.32"},{"id":44,"name":"1-insert-ghost-db-backup-role.js","version":"2.27","currentVersion":"3.32"},{"id":45,"name":"2-insert-db-backup-integration.js","version":"2.27","currentVersion":"3.32"},{"id":46,"name":"3-add-subdirectory-to-relative-canonical-urls.js","version":"2.27","currentVersion":"3.32"},{"id":47,"name":"1-add-db-backup-content-permission.js","version":"2.28","currentVersion":"3.32"},{"id":48,"name":"2-add-db-backup-content-permission-to-roles.js","version":"2.28","currentVersion":"3.32"},{"id":49,"name":"3-insert-ghost-scheduler-role.js","version":"2.28","currentVersion":"3.32"},{"id":50,"name":"4-insert-scheduler-integration.js","version":"2.28","currentVersion":"3.32"},{"id":51,"name":"5-add-scheduler-permission-to-roles.js","version":"2.28","currentVersion":"3.32"},{"id":52,"name":"6-add-type-column.js","version":"2.28","currentVersion":"3.32"},{"id":53,"name":"7-populate-type-column.js","version":"2.28","currentVersion":"3.32"},{"id":54,"name":"8-remove-page-column.js","version":"2.28","currentVersion":"3.32"},{"id":55,"name":"1-add-post-page-column.js","version":"2.29","currentVersion":"3.32"},{"id":56,"name":"2-populate-post-page-column.js","version":"2.29","currentVersion":"3.32"},{"id":57,"name":"3-remove-page-type-column.js","version":"2.29","currentVersion":"3.32"},{"id":58,"name":"1-remove-name-and-password-from-members-table.js","version":"2.31","currentVersion":"3.32"},{"id":59,"name":"01-add-members-stripe-customers-table.js","version":"2.32","currentVersion":"3.32"},{"id":60,"name":"02-add-name-to-members-table.js","version":"2.32","currentVersion":"3.32"},{"id":61,"name":"01-correct-members-stripe-customers-table.js","version":"2.33","currentVersion":"3.32"},{"id":62,"name":"01-add-stripe-customers-subscriptions-table.js","version":"2.34","currentVersion":"3.32"},{"id":63,"name":"02-add-email-to-members-stripe-customers-table.js","version":"2.34","currentVersion":"3.32"},{"id":64,"name":"03-add-name-to-members-stripe-customers-table.js","version":"2.34","currentVersion":"3.32"},{"id":65,"name":"01-add-note-to-members-table.js","version":"2.35","currentVersion":"3.32"},{"id":66,"name":"01-add-self-signup-and-from address-to-members-settings.js","version":"2.37","currentVersion":"3.32"},{"id":67,"name":"01-remove-user-ghost-auth-columns.js","version":"3.0","currentVersion":"3.32"},{"id":68,"name":"02-drop-token-auth-tables.js","version":"3.0","currentVersion":"3.32"},{"id":69,"name":"03-drop-client-auth-tables.js","version":"3.0","currentVersion":"3.32"},{"id":70,"name":"04-add-posts-meta-table.js","version":"3.0","currentVersion":"3.32"},{"id":71,"name":"05-populate-posts-meta-table.js","version":"3.0","currentVersion":"3.32"},{"id":72,"name":"06-remove-posts-meta-columns.js","version":"3.0","currentVersion":"3.32"},{"id":73,"name":"07-add-posts-type-column.js","version":"3.0","currentVersion":"3.32"},{"id":74,"name":"08-populate-posts-type-column.js","version":"3.0","currentVersion":"3.32"},{"id":75,"name":"09-remove-posts-page-column.js","version":"3.0","currentVersion":"3.32"},{"id":76,"name":"10-remove-empty-strings.js","version":"3.0","currentVersion":"3.32"},{"id":77,"name":"11-update-posts-html.js","version":"3.0","currentVersion":"3.32"},{"id":78,"name":"12-populate-members-table-from-subscribers.js","version":"3.0","currentVersion":"3.32"},{"id":79,"name":"13-drop-subscribers-table.js","version":"3.0","currentVersion":"3.32"},{"id":80,"name":"14-remove-subscribers-flag.js","version":"3.0","currentVersion":"3.32"},{"id":81,"name":"01-add-send-email-when-published-to-posts.js","version":"3.1","currentVersion":"3.32"},{"id":82,"name":"02-add-email-subject-to-posts-meta.js","version":"3.1","currentVersion":"3.32"},{"id":83,"name":"03-add-email-preview-permissions.js","version":"3.1","currentVersion":"3.32"},{"id":84,"name":"04-add-subscribed-flag-to-members.js","version":"3.1","currentVersion":"3.32"},{"id":85,"name":"05-add-emails-table.js","version":"3.1","currentVersion":"3.32"},{"id":86,"name":"06-add-email-permissions.js","version":"3.1","currentVersion":"3.32"},{"id":87,"name":"07-add-uuid-field-to-members.js","version":"3.1","currentVersion":"3.32"},{"id":88,"name":"08-add-uuid-values-to-members.js","version":"3.1","currentVersion":"3.32"},{"id":89,"name":"09-add-further-email-permissions.js","version":"3.1","currentVersion":"3.32"},{"id":90,"name":"10-add-email-error-data-column.js","version":"3.1","currentVersion":"3.32"},{"id":91,"name":"01-add-cancel-at-period-end-to-subscriptions.js","version":"3.2","currentVersion":"3.32"},{"id":92,"name":"1-add-labels-table.js","version":"3.6","currentVersion":"3.32"},{"id":93,"name":"2-add-members-labels-table.js","version":"3.6","currentVersion":"3.32"},{"id":94,"name":"3-add-labels-permissions.js","version":"3.6","currentVersion":"3.32"},{"id":95,"name":"01-fix-incorrect-member-labels-foreign-keys.js","version":"3.7","currentVersion":"3.32"},{"id":96,"name":"01-add-geolocation-to-members.js","version":"3.8","currentVersion":"3.32"},{"id":97,"name":"01-add-member-sigin-url-permissions.js","version":"3.9","currentVersion":"3.32"},{"id":98,"name":"01-remove-broken-complimentary-plan-from-members-settings.js","version":"3.11","currentVersion":"3.32"},{"id":99,"name":"01-add-identity-permission.js","version":"3.12","currentVersion":"3.32"},{"id":100,"name":"02-remove-legacy-is-paid-flag-from-settings.js","version":"3.12","currentVersion":"3.32"},{"id":101,"name":"01-add-email-preview-permissions-to-roles.js","version":"3.18","currentVersion":"3.32"},{"id":102,"name":"02-add-members_stripe_connect-auth-permissions.js","version":"3.18","currentVersion":"3.32"},{"id":103,"name":"01-update-member-from-email-address.js","version":"3.19","currentVersion":"3.32"},{"id":104,"name":"01-removed-legacy-values-from-settings-table.js","version":"3.22","currentVersion":"3.32"},{"id":105,"name":"02-settings-key-renames.js","version":"3.22","currentVersion":"3.32"},{"id":106,"name":"03-add-group-and-flags-to-settings.js","version":"3.22","currentVersion":"3.32"},{"id":107,"name":"04-populate-settings-groups-and-flags.js","version":"3.22","currentVersion":"3.32"},{"id":108,"name":"05-migrate-members-subscription-settings.js","version":"3.22","currentVersion":"3.32"},{"id":109,"name":"06-migrate-stripe-connect-settings.js","version":"3.22","currentVersion":"3.32"},{"id":110,"name":"07-update-type-for-settings.js","version":"3.22","currentVersion":"3.32"},{"id":111,"name":"01-migrate-bulk-email-settings.js","version":"3.23","currentVersion":"3.32"},{"id":112,"name":"02-remove-bulk-email-settings.js","version":"3.23","currentVersion":"3.32"},{"id":113,"name":"03-update-portal-button-setting.js","version":"3.23","currentVersion":"3.32"},{"id":114,"name":"04-add-meta-columns-to-tags-table.js","version":"3.23","currentVersion":"3.32"},{"id":115,"name":"01-populate-group-for-new-portal-settings.js","version":"3.24","currentVersion":"3.32"},{"id":116,"name":"01-add-members-stripe-webhook-settings.js","version":"3.25","currentVersion":"3.32"},{"id":117,"name":"01-add-amp-gtag-id-setting.js","version":"3.26","currentVersion":"3.32"},{"id":118,"name":"01-remove-duplicate-subscriptions.js","version":"3.29","currentVersion":"3.32"},{"id":119,"name":"02-remove-duplicate-customers.js","version":"3.29","currentVersion":"3.32"},{"id":120,"name":"03-remove-orphaned-customers.js","version":"3.29","currentVersion":"3.32"},{"id":121,"name":"04-remove-orphaned-subscriptions.js","version":"3.29","currentVersion":"3.32"},{"id":122,"name":"05-add-member-constraints.js","version":"3.29","currentVersion":"3.32"},{"id":123,"name":"01-add-member-signin-url-permission-roles.js","version":"3.30","currentVersion":"3.32"},{"id":124,"name":"01-add-member-support-address-setting.js","version":"3.32","currentVersion":"3.32"},{"id":125,"name":"02-add-member-reply-address-setting.js","version":"3.32","currentVersion":"3.32"},{"id":126,"name":"03-add-routes-hash-setting.js","version":"3.32","currentVersion":"3.32"}],"posts":[{"id":"5f681e8504f4220001a8d8a2","uuid":"f2757a75-6c4e-471c-bbc2-be911163f2ab","title":"什么是Promises/A+？如何实现一个then链式调用？","slug":"my-promise","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"# 什么是Promises/A+规范？\\n\\n是Promise的一个非常稳定标准，用于给实现该标准的一个说明。他规范了then方法的行为，使得同一份代码在不同平台也能拥有相同效果。\\n\\n[https://promisesaplus.com/](https://promisesaplus.com/)这里有一个详细的解释。\\n\\n# 实现then链式调用\\n\\nPromise语法\\n\\n```javascript\\nnew Promise((resolve, reject) => {} /* executor */  );\\n```\\n\\n## executor\\nexecutor是带有 `resolve` 和 `reject` 两个参数的函数 。Promise构造函数执行时立即调用 `executor` 函数， `resolve` 和 `reject` 两个函数作为参数传递给executor（executor 函数在Promise构造函数返回所建promise实例对象前被调用）。`resolve` 和 `reject` 函数被调用时，分别将promise的状态改为`fulfilled`（完成）或`rejected`（失败）。executor 内部通常会执行一些异步操作，一旦异步操作执行完毕(可能成功/失败)，要么调用resolve函数来将promise状态改成`fulfilled`，要么调用 reject 函数将 promise 的状态改为 `rejected`。如果在executor函数中抛出一个错误，那么该promise 状态为`rejected`。executor函数的返回值被忽略。\\n\\n```javascript\\nnew Promise(\\n    (resolve, reject) => {\\n        setTimeout(() => {\\n            resolve(100)\\n        }, 0)\\n    }\\n).then(v => {\\n    console.log(v) // 100\\n}, e => {\\n    console.log(e) //\\n})\\n```\\n\\n上面是一个经典的Promise例子，使用`setTimeout`延迟将100返回给`then`方法使用。那么，我们为了实现上面的功能，应该提前做哪些准备呢？\\n\\n+ executor立即执行，那么我们需要在new一个实例的时候，直接执行executor，并传入`resolve`，`reject`。\\n+ then方法返回一个Promise，接收两个参数，`promise.then(onFulfilled?: Function, onRejected?: Function)`，`onFulfilled`和`onRejected`必须为函数，分别在成功或失败后调用。\\n+ `resolve`或`reject`的值需要传递给下一个`then`方法中的`onFulfilled`或`onRejected`。\\n+ Promise只有一个状态，初始状态为`pending`。`fulfilled`/`rejected`状态为最终状态，不能转换为其它状态。\\n\\n有了上述准备，接下来使用伪代码实现一个demo。（使用伪代码的原因是因为在给别人演示或面试时可以提高效率，避免在细节上花太多的时间）\\n\\n以下为ES6的代码，ES5可以使用function和prototype实现。\\n```javascript\\nclass xPromise {\\n\\n    constructor(executor) {\\n        const resolve = value => {\\n            // ...\\n        }\\n        const reject = reson => {\\n            // ...\\n        }\\n        executor(resolve, reject)\\n    }\\n\\n    then(onFulfilled, onRejected) {\\n        return new xPromise((resolve, reject) => {\\n            // ...\\n            try {\\n                onFulfilled(this.value)\\n            } catch(e) {\\n                onRejected(e)\\n            }\\n        })\\n    }\\n}\\n\\nconst promise1 = new xPromise((resolve, reject) => {\\n    resolve(100)\\n})\\npromise1.then(v => {\\n    console.log(v) // 100\\n})\\nconsole.log('end')\\n\\n/*\\n * 控制台输出：\\n * 100\\n * end\\n */\\n```\\n\\n为什么先输出100？再输出end呢？\\n\\n原因在于then方法中执行`onFulfilled`/`onRejected`为同步执行，那么，我们将`then`方法稍加修改。\\n\\n```javascript\\nthen(onFulfilled, onRejected) {\\n    return new xPromise((resolve, reject) => {\\n        // ...\\n        try {\\n            const onFulfill = v => {\\n                process.nextTick() // This can be implemented with either a “macro-task” mechanism such as setTimeout or setImmediate, or with a “micro-task” mechanism such as MutationObserver or process.nextTick\\n            }\\n            onFulfill(this.value)\\n        } catch(e) {\\n            const onReject = v => {\\n                process.nextTick()\\n            }\\n            onReject(e)\\n        }\\n    })\\n}\\n\\n/*\\n * 控制台输出：\\n * end\\n * 100\\n */\\n```\\n\\n现在输出已经符合预期，那么我们看看最初那个经典的例子。\\n\\n```javascript\\nnew xPromise(\\n    (resolve, reject) => {\\n        setTimeout(() => {\\n            resolve(100)\\n        }, 0)\\n    }\\n).then(v => {\\n    console.log(v) // 100\\n}, e => {\\n    console.log(e) //\\n})\\n\\n/*\\n * 控制台输出：\\n */\\n```\\n\\n怎么回事，我们的输入呢？很明显，没有进入到`then`方法中，为什么会产生这样子的效果，原因时因为执行`executor`时，使用了`setTimeout`这个定时器函数，那我们可以换一种思路，在`then`方法中不直接调用传递进来的参数，而是使用一个数组将参数保存下来，在`resolve`中再循环执行这个数组中的函数。那应该怎么改呢？\\n\\n构造函数中初始化两个数组，分别保存`onFulfilled`/`onRejected`\\n```javascript\\nclass xPromise {\\n    constructor(executor) {\\n        this.resolveCallback = []\\n        this.rejectCallback = []\\n        const resolve = value => {\\n            // ...\\n            this.resolveCallback.forEach(f => f())\\n        }\\n        const reject = reson => {\\n            // ...\\n            this.rejectCallback.forEach(f => f())\\n        }\\n        executor(resolve, reject)\\n    }\\n\\n    then(onFulfilled, onRejected) {\\n        return new xPromise((resolve, reject) => {\\n            const onFulfill = v => {\\n                process.nextTick() // This can be implemented with either a “macro-task” mechanism such as setTimeout or setImmediate, or with a “micro-task” mechanism such as MutationObserver or process.nextTick\\n            }\\n            const onReject = v => {\\n                process.nextTick()\\n            }\\n            this.resolveCallback.push(onFulfill)\\n            this.rejectCallback.push(onReject)\\n        })\\n    }\\n}\\n\\nconsole.log('start')\\nnew xPromise(\\n    (resolve, reject) => {\\n        setTimeout(() => {\\n            resolve(100)\\n        }, 1000)\\n    }\\n).then(v => {\\n    console.log(v) // 100\\n}, e => {\\n    console.log(e) //\\n})\\nconsole.log('end')\\n\\n/*\\n * 控制台输出：\\n * start\\n * end\\n * -> 1s后输出 <100>\\n */\\n```\\n\\n到现在为止，我们实现了`then`方法，那么如何在链式调用时穿透值呢？其实很简单，我们只需要在`resolve`时候把值保存起来，在callback遍历时传递进去即可。不过，我们还需要注意`then`方法可能会返回一个Promise，所以，在`onFulfill`/`onReject`中需要使用`instanceof`判断函数执行的返回值是否为Promise。\\n\\n```javascript\\nthen(onFulfilled, onRejected) {\\n    return new xPromise((resolve, reject) => {\\n        const onFulfill = v => {\\n            const fn = () => {\\n                try {\\n                    /*\\n                     * 使用 instanceof 判断，然后调用then方法使用resolve传递出去\\n                     */\\n                    const result = onFulfilled(v)\\n                    if (result instanceof xPromise) {\\n                        result.then(v => {\\n                            resolve(v)\\n                        })\\n                    }\\n                    // ...\\n                } catch (e) {\\n                    // ...\\n                }\\n            }\\n            process.nextTick(fn)\\n        }\\n        this.resolveCallback.push(onFulfill)\\n    })\\n}\\n\\nconsole.log('start')\\nnew xPromise(\\n    (resolve, reject) => {\\n        setTimeout(() => {\\n            resolve(100)\\n        }, 1000)\\n    }\\n).then(v => {\\n    console.log(v)\\n    return new xPromise(r => {\\n        setTimeout(() => {\\n            resolve(1000)\\n        }, 1000)\\n    })\\n}, e => {\\n    console.log(e) //\\n}).then(v => {\\n    console.log(v)\\n})\\nconsole.log('end')\\n\\n/*\\n * 控制台输出：\\n * start\\n * end\\n * -> 1s后输出 <100>\\n * -> 再等1s后输出 <1000>\\n */\\n```\\n\\n现在已经实现了大部分功能，我们再具体细化一下实现`all`/`resolve`/`reject`(reject的值必须为Error实例)\\n\\n```javascript\\nclass xPromise {\\n    static all(promiseArray) {\\n        return new xPromise((resolve, reject) => {\\n            promiseArray.forEach((promise, index) => {\\n                promise.then(v => {\\n                    if ((result.length - 1) === index) {\\n                        resolve(result)\\n                    }\\n                }, e => {\\n                    reject(e)\\n                })\\n            })\\n        })\\n    }\\n\\n    static resolve(value) {\\n        return new xPromise((resolve, reject) => {\\n            resolve(value)\\n        })\\n    }\\n\\n    static reject(reson) {\\n        return new xPromise((resolve, reject) => {\\n            reject(reson)\\n        })\\n    }\\n}\\n\\nconst promise1 = new xPromise((resolve, reject) => {\\n    setTimeout(() => {\\n        reject(new Error('Fail1'))\\n    }, 500)\\n})\\nconst promise2 = new xPromise(resolve => {\\n    setTimeout(() => {\\n        resolve('promise2')\\n    }, 1000)\\n})\\nxPromise.all([\\n    promise2,\\n    promise1,\\n]).then(v => {\\n    console.log(v.join(','))\\n}).catch(e => {\\n    console.log(promise1.status)\\n    console.log(promise2.status)\\n    console.log(e)\\n    return 100\\n}).then(v => {\\n    console.log('then', v)\\n})\\n\\n/*\\n * 控制台输出：\\nrejected\\npending\\n0.5s后输出：Error: Fail1\\n    at Timeout._onTimeout (D:\\\\demo\\\\vue-next\\\\Promise.js:174:16)\\n    at listOnTimeout (internal/timers.js:549:17)\\n    at processTimers (internal/timers.js:492:7)\\nthen 100\\n */\\n```\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"<!--kg-card-begin: markdown--><h1 id=\"promisesa\">什么是Promises/A+规范？</h1>\n<p>是Promise的一个非常稳定标准，用于给实现该标准的一个说明。他规范了then方法的行为，使得同一份代码在不同平台也能拥有相同效果。</p>\n<p><a href=\"https://promisesaplus.com/\">https://promisesaplus.com/</a>这里有一个详细的解释。</p>\n<h1 id=\"then\">实现then链式调用</h1>\n<p>Promise语法</p>\n<pre><code class=\"language-javascript\">new Promise((resolve, reject) =&gt; {} /* executor */  );\n</code></pre>\n<h2 id=\"executor\">executor</h2>\n<p>executor是带有 <code>resolve</code> 和 <code>reject</code> 两个参数的函数 。Promise构造函数执行时立即调用 <code>executor</code> 函数， <code>resolve</code> 和 <code>reject</code> 两个函数作为参数传递给executor（executor 函数在Promise构造函数返回所建promise实例对象前被调用）。<code>resolve</code> 和 <code>reject</code> 函数被调用时，分别将promise的状态改为<code>fulfilled</code>（完成）或<code>rejected</code>（失败）。executor 内部通常会执行一些异步操作，一旦异步操作执行完毕(可能成功/失败)，要么调用resolve函数来将promise状态改成<code>fulfilled</code>，要么调用 reject 函数将 promise 的状态改为 <code>rejected</code>。如果在executor函数中抛出一个错误，那么该promise 状态为<code>rejected</code>。executor函数的返回值被忽略。</p>\n<pre><code class=\"language-javascript\">new Promise(\n    (resolve, reject) =&gt; {\n        setTimeout(() =&gt; {\n            resolve(100)\n        }, 0)\n    }\n).then(v =&gt; {\n    console.log(v) // 100\n}, e =&gt; {\n    console.log(e) //\n})\n</code></pre>\n<p>上面是一个经典的Promise例子，使用<code>setTimeout</code>延迟将100返回给<code>then</code>方法使用。那么，我们为了实现上面的功能，应该提前做哪些准备呢？</p>\n<ul>\n<li>executor立即执行，那么我们需要在new一个实例的时候，直接执行executor，并传入<code>resolve</code>，<code>reject</code>。</li>\n<li>then方法返回一个Promise，接收两个参数，<code>promise.then(onFulfilled?: Function, onRejected?: Function)</code>，<code>onFulfilled</code>和<code>onRejected</code>必须为函数，分别在成功或失败后调用。</li>\n<li><code>resolve</code>或<code>reject</code>的值需要传递给下一个<code>then</code>方法中的<code>onFulfilled</code>或<code>onRejected</code>。</li>\n<li>Promise只有一个状态，初始状态为<code>pending</code>。<code>fulfilled</code>/<code>rejected</code>状态为最终状态，不能转换为其它状态。</li>\n</ul>\n<p>有了上述准备，接下来使用伪代码实现一个demo。（使用伪代码的原因是因为在给别人演示或面试时可以提高效率，避免在细节上花太多的时间）</p>\n<p>以下为ES6的代码，ES5可以使用function和prototype实现。</p>\n<pre><code class=\"language-javascript\">class xPromise {\n\n    constructor(executor) {\n        const resolve = value =&gt; {\n            // ...\n        }\n        const reject = reson =&gt; {\n            // ...\n        }\n        executor(resolve, reject)\n    }\n\n    then(onFulfilled, onRejected) {\n        return new xPromise((resolve, reject) =&gt; {\n            // ...\n            try {\n                onFulfilled(this.value)\n            } catch(e) {\n                onRejected(e)\n            }\n        })\n    }\n}\n\nconst promise1 = new xPromise((resolve, reject) =&gt; {\n    resolve(100)\n})\npromise1.then(v =&gt; {\n    console.log(v) // 100\n})\nconsole.log('end')\n\n/*\n * 控制台输出：\n * 100\n * end\n */\n</code></pre>\n<p>为什么先输出100？再输出end呢？</p>\n<p>原因在于then方法中执行<code>onFulfilled</code>/<code>onRejected</code>为同步执行，那么，我们将<code>then</code>方法稍加修改。</p>\n<pre><code class=\"language-javascript\">then(onFulfilled, onRejected) {\n    return new xPromise((resolve, reject) =&gt; {\n        // ...\n        try {\n            const onFulfill = v =&gt; {\n                process.nextTick() // This can be implemented with either a “macro-task” mechanism such as setTimeout or setImmediate, or with a “micro-task” mechanism such as MutationObserver or process.nextTick\n            }\n            onFulfill(this.value)\n        } catch(e) {\n            const onReject = v =&gt; {\n                process.nextTick()\n            }\n            onReject(e)\n        }\n    })\n}\n\n/*\n * 控制台输出：\n * end\n * 100\n */\n</code></pre>\n<p>现在输出已经符合预期，那么我们看看最初那个经典的例子。</p>\n<pre><code class=\"language-javascript\">new xPromise(\n    (resolve, reject) =&gt; {\n        setTimeout(() =&gt; {\n            resolve(100)\n        }, 0)\n    }\n).then(v =&gt; {\n    console.log(v) // 100\n}, e =&gt; {\n    console.log(e) //\n})\n\n/*\n * 控制台输出：\n */\n</code></pre>\n<p>怎么回事，我们的输入呢？很明显，没有进入到<code>then</code>方法中，为什么会产生这样子的效果，原因时因为执行<code>executor</code>时，使用了<code>setTimeout</code>这个定时器函数，那我们可以换一种思路，在<code>then</code>方法中不直接调用传递进来的参数，而是使用一个数组将参数保存下来，在<code>resolve</code>中再循环执行这个数组中的函数。那应该怎么改呢？</p>\n<p>构造函数中初始化两个数组，分别保存<code>onFulfilled</code>/<code>onRejected</code></p>\n<pre><code class=\"language-javascript\">class xPromise {\n    constructor(executor) {\n        this.resolveCallback = []\n        this.rejectCallback = []\n        const resolve = value =&gt; {\n            // ...\n            this.resolveCallback.forEach(f =&gt; f())\n        }\n        const reject = reson =&gt; {\n            // ...\n            this.rejectCallback.forEach(f =&gt; f())\n        }\n        executor(resolve, reject)\n    }\n\n    then(onFulfilled, onRejected) {\n        return new xPromise((resolve, reject) =&gt; {\n            const onFulfill = v =&gt; {\n                process.nextTick() // This can be implemented with either a “macro-task” mechanism such as setTimeout or setImmediate, or with a “micro-task” mechanism such as MutationObserver or process.nextTick\n            }\n            const onReject = v =&gt; {\n                process.nextTick()\n            }\n            this.resolveCallback.push(onFulfill)\n            this.rejectCallback.push(onReject)\n        })\n    }\n}\n\nconsole.log('start')\nnew xPromise(\n    (resolve, reject) =&gt; {\n        setTimeout(() =&gt; {\n            resolve(100)\n        }, 1000)\n    }\n).then(v =&gt; {\n    console.log(v) // 100\n}, e =&gt; {\n    console.log(e) //\n})\nconsole.log('end')\n\n/*\n * 控制台输出：\n * start\n * end\n * -&gt; 1s后输出 &lt;100&gt;\n */\n</code></pre>\n<p>到现在为止，我们实现了<code>then</code>方法，那么如何在链式调用时穿透值呢？其实很简单，我们只需要在<code>resolve</code>时候把值保存起来，在callback遍历时传递进去即可。不过，我们还需要注意<code>then</code>方法可能会返回一个Promise，所以，在<code>onFulfill</code>/<code>onReject</code>中需要使用<code>instanceof</code>判断函数执行的返回值是否为Promise。</p>\n<pre><code class=\"language-javascript\">then(onFulfilled, onRejected) {\n    return new xPromise((resolve, reject) =&gt; {\n        const onFulfill = v =&gt; {\n            const fn = () =&gt; {\n                try {\n                    /*\n                     * 使用 instanceof 判断，然后调用then方法使用resolve传递出去\n                     */\n                    const result = onFulfilled(v)\n                    if (result instanceof xPromise) {\n                        result.then(v =&gt; {\n                            resolve(v)\n                        })\n                    }\n                    // ...\n                } catch (e) {\n                    // ...\n                }\n            }\n            process.nextTick(fn)\n        }\n        this.resolveCallback.push(onFulfill)\n    })\n}\n\nconsole.log('start')\nnew xPromise(\n    (resolve, reject) =&gt; {\n        setTimeout(() =&gt; {\n            resolve(100)\n        }, 1000)\n    }\n).then(v =&gt; {\n    console.log(v)\n    return new xPromise(r =&gt; {\n        setTimeout(() =&gt; {\n            resolve(1000)\n        }, 1000)\n    })\n}, e =&gt; {\n    console.log(e) //\n}).then(v =&gt; {\n    console.log(v)\n})\nconsole.log('end')\n\n/*\n * 控制台输出：\n * start\n * end\n * -&gt; 1s后输出 &lt;100&gt;\n * -&gt; 再等1s后输出 &lt;1000&gt;\n */\n</code></pre>\n<p>现在已经实现了大部分功能，我们再具体细化一下实现<code>all</code>/<code>resolve</code>/<code>reject</code>(reject的值必须为Error实例)</p>\n<pre><code class=\"language-javascript\">class xPromise {\n    static all(promiseArray) {\n        return new xPromise((resolve, reject) =&gt; {\n            promiseArray.forEach((promise, index) =&gt; {\n                promise.then(v =&gt; {\n                    if ((result.length - 1) === index) {\n                        resolve(result)\n                    }\n                }, e =&gt; {\n                    reject(e)\n                })\n            })\n        })\n    }\n\n    static resolve(value) {\n        return new xPromise((resolve, reject) =&gt; {\n            resolve(value)\n        })\n    }\n\n    static reject(reson) {\n        return new xPromise((resolve, reject) =&gt; {\n            reject(reson)\n        })\n    }\n}\n\nconst promise1 = new xPromise((resolve, reject) =&gt; {\n    setTimeout(() =&gt; {\n        reject(new Error('Fail1'))\n    }, 500)\n})\nconst promise2 = new xPromise(resolve =&gt; {\n    setTimeout(() =&gt; {\n        resolve('promise2')\n    }, 1000)\n})\nxPromise.all([\n    promise2,\n    promise1,\n]).then(v =&gt; {\n    console.log(v.join(','))\n}).catch(e =&gt; {\n    console.log(promise1.status)\n    console.log(promise2.status)\n    console.log(e)\n    return 100\n}).then(v =&gt; {\n    console.log('then', v)\n})\n\n/*\n * 控制台输出：\nrejected\npending\n0.5s后输出：Error: Fail1\n    at Timeout._onTimeout (D:\\demo\\vue-next\\Promise.js:174:16)\n    at listOnTimeout (internal/timers.js:549:17)\n    at processTimers (internal/timers.js:492:7)\nthen 100\n */\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"5f59fc89a166e50001965a5c","plaintext":"什么是Promises/A+规范？\n是Promise的一个非常稳定标准，用于给实现该标准的一个说明。他规范了then方法的行为，使得同一份代码在不同平台也能拥有相同效果。\n\nhttps://promisesaplus.com/这里有一个详细的解释。\n\n实现then链式调用\nPromise语法\n\nnew Promise((resolve, reject) => {} /* executor */  );\n\n\nexecutor\nexecutor是带有 resolve 和 reject 两个参数的函数 。Promise构造函数执行时立即调用 executor 函数， resolve 和 \nreject 两个函数作为参数传递给executor（executor 函数在Promise构造函数返回所建promise实例对象前被调用）。resolve 和 \nreject 函数被调用时，分别将promise的状态改为fulfilled（完成）或rejected（失败）。executor\n内部通常会执行一些异步操作，一旦异步操作执行完毕(可能成功/失败)，要么调用resolve函数来将promise状态改成fulfilled，要么调用\nreject 函数将 promise 的状态改为 rejected。如果在executor函数中抛出一个错误，那么该promise 状态为rejected\n。executor函数的返回值被忽略。\n\nnew Promise(\n    (resolve, reject) => {\n        setTimeout(() => {\n            resolve(100)\n        }, 0)\n    }\n).then(v => {\n    console.log(v) // 100\n}, e => {\n    console.log(e) //\n})\n\n\n上面是一个经典的Promise例子，使用setTimeout延迟将100返回给then方法使用。那么，我们为了实现上面的功能，应该提前做哪些准备呢？\n\n * executor立即执行，那么我们需要在new一个实例的时候，直接执行executor，并传入resolve，reject。\n * then方法返回一个Promise，接收两个参数，promise.then(onFulfilled?: Function, onRejected?:\n   Function)，onFulfilled和onRejected必须为函数，分别在成功或失败后调用。\n * resolve或reject的值需要传递给下一个then方法中的onFulfilled或onRejected。\n * Promise只有一个状态，初始状态为pending。fulfilled/rejected状态为最终状态，不能转换为其它状态。\n\n有了上述准备，接下来使用伪代码实现一个demo。（使用伪代码的原因是因为在给别人演示或面试时可以提高效率，避免在细节上花太多的时间）\n\n以下为ES6的代码，ES5可以使用function和prototype实现。\n\nclass xPromise {\n\n    constructor(executor) {\n        const resolve = value => {\n            // ...\n        }\n        const reject = reson => {\n            // ...\n        }\n        executor(resolve, reject)\n    }\n\n    then(onFulfilled, onRejected) {\n        return new xPromise((resolve, reject) => {\n            // ...\n            try {\n                onFulfilled(this.value)\n            } catch(e) {\n                onRejected(e)\n            }\n        })\n    }\n}\n\nconst promise1 = new xPromise((resolve, reject) => {\n    resolve(100)\n})\npromise1.then(v => {\n    console.log(v) // 100\n})\nconsole.log('end')\n\n/*\n * 控制台输出：\n * 100\n * end\n */\n\n\n为什么先输出100？再输出end呢？\n\n原因在于then方法中执行onFulfilled/onRejected为同步执行，那么，我们将then方法稍加修改。\n\nthen(onFulfilled, onRejected) {\n    return new xPromise((resolve, reject) => {\n        // ...\n        try {\n            const onFulfill = v => {\n                process.nextTick() // This can be implemented with either a “macro-task” mechanism such as setTimeout or setImmediate, or with a “micro-task” mechanism such as MutationObserver or process.nextTick\n            }\n            onFulfill(this.value)\n        } catch(e) {\n            const onReject = v => {\n                process.nextTick()\n            }\n            onReject(e)\n        }\n    })\n}\n\n/*\n * 控制台输出：\n * end\n * 100\n */\n\n\n现在输出已经符合预期，那么我们看看最初那个经典的例子。\n\nnew xPromise(\n    (resolve, reject) => {\n        setTimeout(() => {\n            resolve(100)\n        }, 0)\n    }\n).then(v => {\n    console.log(v) // 100\n}, e => {\n    console.log(e) //\n})\n\n/*\n * 控制台输出：\n */\n\n\n怎么回事，我们的输入呢？很明显，没有进入到then方法中，为什么会产生这样子的效果，原因时因为执行executor时，使用了setTimeout\n这个定时器函数，那我们可以换一种思路，在then方法中不直接调用传递进来的参数，而是使用一个数组将参数保存下来，在resolve\n中再循环执行这个数组中的函数。那应该怎么改呢？\n\n构造函数中初始化两个数组，分别保存onFulfilled/onRejected\n\nclass xPromise {\n    constructor(executor) {\n        this.resolveCallback = []\n        this.rejectCallback = []\n        const resolve = value => {\n            // ...\n            this.resolveCallback.forEach(f => f())\n        }\n        const reject = reson => {\n            // ...\n            this.rejectCallback.forEach(f => f())\n        }\n        executor(resolve, reject)\n    }\n\n    then(onFulfilled, onRejected) {\n        return new xPromise((resolve, reject) => {\n            const onFulfill = v => {\n                process.nextTick() // This can be implemented with either a “macro-task” mechanism such as setTimeout or setImmediate, or with a “micro-task” mechanism such as MutationObserver or process.nextTick\n            }\n            const onReject = v => {\n                process.nextTick()\n            }\n            this.resolveCallback.push(onFulfill)\n            this.rejectCallback.push(onReject)\n        })\n    }\n}\n\nconsole.log('start')\nnew xPromise(\n    (resolve, reject) => {\n        setTimeout(() => {\n            resolve(100)\n        }, 1000)\n    }\n).then(v => {\n    console.log(v) // 100\n}, e => {\n    console.log(e) //\n})\nconsole.log('end')\n\n/*\n * 控制台输出：\n * start\n * end\n * -> 1s后输出 <100>\n */\n\n\n到现在为止，我们实现了then方法，那么如何在链式调用时穿透值呢？其实很简单，我们只需要在resolve\n时候把值保存起来，在callback遍历时传递进去即可。不过，我们还需要注意then方法可能会返回一个Promise，所以，在onFulfill/\nonReject中需要使用instanceof判断函数执行的返回值是否为Promise。\n\nthen(onFulfilled, onRejected) {\n    return new xPromise((resolve, reject) => {\n        const onFulfill = v => {\n            const fn = () => {\n                try {\n                    /*\n                     * 使用 instanceof 判断，然后调用then方法使用resolve传递出去\n                     */\n                    const result = onFulfilled(v)\n                    if (result instanceof xPromise) {\n                        result.then(v => {\n                            resolve(v)\n                        })\n                    }\n                    // ...\n                } catch (e) {\n                    // ...\n                }\n            }\n            process.nextTick(fn)\n        }\n        this.resolveCallback.push(onFulfill)\n    })\n}\n\nconsole.log('start')\nnew xPromise(\n    (resolve, reject) => {\n        setTimeout(() => {\n            resolve(100)\n        }, 1000)\n    }\n).then(v => {\n    console.log(v)\n    return new xPromise(r => {\n        setTimeout(() => {\n            resolve(1000)\n        }, 1000)\n    })\n}, e => {\n    console.log(e) //\n}).then(v => {\n    console.log(v)\n})\nconsole.log('end')\n\n/*\n * 控制台输出：\n * start\n * end\n * -> 1s后输出 <100>\n * -> 再等1s后输出 <1000>\n */\n\n\n现在已经实现了大部分功能，我们再具体细化一下实现all/resolve/reject(reject的值必须为Error实例)\n\nclass xPromise {\n    static all(promiseArray) {\n        return new xPromise((resolve, reject) => {\n            promiseArray.forEach((promise, index) => {\n                promise.then(v => {\n                    if ((result.length - 1) === index) {\n                        resolve(result)\n                    }\n                }, e => {\n                    reject(e)\n                })\n            })\n        })\n    }\n\n    static resolve(value) {\n        return new xPromise((resolve, reject) => {\n            resolve(value)\n        })\n    }\n\n    static reject(reson) {\n        return new xPromise((resolve, reject) => {\n            reject(reson)\n        })\n    }\n}\n\nconst promise1 = new xPromise((resolve, reject) => {\n    setTimeout(() => {\n        reject(new Error('Fail1'))\n    }, 500)\n})\nconst promise2 = new xPromise(resolve => {\n    setTimeout(() => {\n        resolve('promise2')\n    }, 1000)\n})\nxPromise.all([\n    promise2,\n    promise1,\n]).then(v => {\n    console.log(v.join(','))\n}).catch(e => {\n    console.log(promise1.status)\n    console.log(promise2.status)\n    console.log(e)\n    return 100\n}).then(v => {\n    console.log('then', v)\n})\n\n/*\n * 控制台输出：\nrejected\npending\n0.5s后输出：Error: Fail1\n    at Timeout._onTimeout (D:\\demo\\vue-next\\Promise.js:174:16)\n    at listOnTimeout (internal/timers.js:549:17)\n    at processTimers (internal/timers.js:492:7)\nthen 100\n */","feature_image":"/content/images/2020/09/JS-Promise-1.png","featured":1,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2020-09-10 10:14:33","updated_at":"2020-09-10 10:16:22","published_at":"2020-08-24 10:14:00","custom_excerpt":"是Promise的一个非常稳定标准，用于给实现该标准的一个说明。他规范了then方法的行为，使得同一份代码在不同平台也能拥有相同效果。","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f681e8504f4220001a8d8a3","uuid":"e48ce816-1465-411b-82d1-4e88c051fe80","title":"从vue2升级到vue3的应该做什么？","slug":"upgrade-2-vue3","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"## emit 需要主动声明\\n\\n在`.vue`组件中，使用`this.$emit('emitName')`时，不需要主动声明emit的第一个参数，在vue3中，必须主动声明`emits`，她接受数组，写法如下\\n\\n```javascript\\nexport default {\\n  template: `\\n    <div @click=\\\"$emit('click')\\\"></div>\\n  `,\\n  emits: ['click']\\n}\\n```\\n\\n如果不主动声明，在使用组件时监听`click`事件，会触发两次。\\n\\n## v-model可以指定值，默认为modelValue\\n\\n在vue2中使用`v-model`默认为value（单选框、复选框等类型的输入控件不同），在vue3中支持自定义value，可以使用`v-model:value=\\\"value\\\"`支持vue2。也可以用`$emit('update:modelValue')`支持`v-model=\\\"value\\\"`，这取决于你可以（愿意）修改哪部分代码。\\n\\n以下为修改子组件的形式。更多信息参考[https://v3.vuejs.org/guide/migration/v-model.html#overview](https://v3.vuejs.org/guide/migration/v-model.html#overview)\\n```javascript\\nimport { createApp, ref } from 'https://unpkg.com/vue@3.0.0-rc.9/dist/vue.esm-browser.js'\\n\\nconst App = createApp({\\n    template: `\\n      <message v-model=\\\"value\\\" />\\n      <button @click=\\\"value += 1\\\">change A value</button>\\n    `,\\n    setup: () => {\\n      const value = ref(0)\\n      return {\\n        value\\n      }\\n    }\\n})\\n\\nconst Message = {\\n  name: 'Message',\\n  template: `\\n    <div>\\n      <span>{{ modelValue }}</span>\\n      <button @click=\\\"$emit('update:modelValue', (modelValue+1))\\\">change B value</button>\\n    </div>\\n  `,\\n  props: {\\n    modelValue: Number\\n  }\\n}\\n\\nApp.component(Message.name, Message)\\n\\nApp.mount('#root')\\n```\\n\\n## 完全移除this.$set\\n\\nvue3最大的改变之一就是使用`Proxy`。【Proxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”（meta programming），即对编程语言进行编程。】①\\n\\n在项目架构中，分离了响应式系统，vue3中的响应式API可以剥离出来单独使用。\\n\\n```javascript\\nimport { ref, computed } from '@vue/reactivity'\\n\\nconst count = ref(1)\\nconst plusOne = computed(() => count.value + 1)\\n\\nconsole.log(plusOne.value) // 2\\n\\nplusOne.value++ // error\\n```\\n\\n## 使用config.globalProperties代替Vue.prototype\\n\\n现在提倡函数式编程，Vue也抛弃了2的new形式实例化一个组件，改用`createApp`创建，所以我们不能再使用`Vue.prototype`创建组件通用方法，更改为`app.config.globalProperties.attr = () => {}`这种形式。\\n\\n```javascript\\n// Before\\nVue.prototype.$http = () => {}\\n\\n// After\\nconst app = Vue.createApp({})\\napp.config.globalProperties.$http = () => {}\\n```\\n\\n## 自定义命令的改变\\n\\nvue2自定义指令文档在这里[https://vuejs.org/v2/guide/custom-directive.html#Hook-Functions](https://vuejs.org/v2/guide/custom-directive.html#Hook-Functions)，vue3自定义指令文档在这里[https://v3.vuejs.org/api/application-api.html#directive](https://v3.vuejs.org/api/application-api.html#directive)。自定义指令在升级过程中暂未发现特别需要注意的地方，按照文档更新即可。\\n\\n```javascript\\n// vue2\\nVue.directive('demo', {\\n  bind: function (el, binding, vnode) {\\n    var s = JSON.stringify\\n    el.innerHTML =\\n      'name: '       + s(binding.name) + '<br>' +\\n      'value: '      + s(binding.value) + '<br>' +\\n      'expression: ' + s(binding.expression) + '<br>' +\\n      'argument: '   + s(binding.arg) + '<br>' +\\n      'modifiers: '  + s(binding.modifiers) + '<br>' +\\n      'vnode keys: ' + Object.keys(vnode).join(', ')\\n  }\\n})\\n\\n// vue3\\nimport { createApp } from 'vue'\\nconst app = createApp({})\\n\\n// register\\napp.directive('my-directive', {\\n  // Directive has a set of lifecycle hooks:\\n  // called before bound element's parent component is mounted\\n  beforeMount() {},\\n  // called when bound element's parent component is mounted\\n  mounted() {},\\n  // called before the containing component's VNode is updated\\n  beforeUpdate() {},\\n  // called after the containing component's VNode and the VNodes of its children // have updated\\n  updated() {},\\n  // called before the bound element's parent component is unmounted\\n  beforeUnmount() {},\\n  // called when the bound element's parent component is unmounted\\n  unmounted() {}\\n})\\n```\\n\\n## nextTick的改变\\n\\n在vue2中，在组件实例上可以使用`this.$nextTick`，它会在渲染之后调用。在vue3中，它变成了一个全局API，需要`import { nextTick } from 'vue'`这样引用。vue3节省了一个实例所占用js内存，以下附两张不同版本的实例截图。\\n\\nVue2\\n![vue2-1](/content/images/2020/09/vue2-1.png)\\n\\nVue3\\n![vue3-1](/content/images/2020/09/vue3-1.png)\\n\\n## 使用definecomponent来进行类型推导\\n\\n当项目中使用typescript时，可以使用definecomponent，它什么也不做，只会进行类型推导，让我们在使用时可以知道参数的类型。[https://v3.vuejs.org/api/global-api.html#definecomponent](https://v3.vuejs.org/api/global-api.html#definecomponent)\\n\\n```javascript\\nimport { definecomponent } from 'vue'\\nexport default definecomponent({\\n  name: '',\\n  setup() {\\n\\n  }\\n})\\n```\\n\\n① [https://es6.ruanyifeng.com/#docs/proxy#%E6%A6%82%E8%BF%B0](https://es6.ruanyifeng.com/#docs/proxy#%E6%A6%82%E8%BF%B0)\\n\\n更新时间：2020.09.04\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"<!--kg-card-begin: markdown--><h2 id=\"emit\">emit 需要主动声明</h2>\n<p>在<code>.vue</code>组件中，使用<code>this.$emit('emitName')</code>时，不需要主动声明emit的第一个参数，在vue3中，必须主动声明<code>emits</code>，她接受数组，写法如下</p>\n<pre><code class=\"language-javascript\">export default {\n  template: `\n    &lt;div @click=&quot;$emit('click')&quot;&gt;&lt;/div&gt;\n  `,\n  emits: ['click']\n}\n</code></pre>\n<p>如果不主动声明，在使用组件时监听<code>click</code>事件，会触发两次。</p>\n<h2 id=\"vmodelmodelvalue\">v-model可以指定值，默认为modelValue</h2>\n<p>在vue2中使用<code>v-model</code>默认为value（单选框、复选框等类型的输入控件不同），在vue3中支持自定义value，可以使用<code>v-model:value=&quot;value&quot;</code>支持vue2。也可以用<code>$emit('update:modelValue')</code>支持<code>v-model=&quot;value&quot;</code>，这取决于你可以（愿意）修改哪部分代码。</p>\n<p>以下为修改子组件的形式。更多信息参考<a href=\"https://v3.vuejs.org/guide/migration/v-model.html#overview\">https://v3.vuejs.org/guide/migration/v-model.html#overview</a></p>\n<pre><code class=\"language-javascript\">import { createApp, ref } from 'https://unpkg.com/vue@3.0.0-rc.9/dist/vue.esm-browser.js'\n\nconst App = createApp({\n    template: `\n      &lt;message v-model=&quot;value&quot; /&gt;\n      &lt;button @click=&quot;value += 1&quot;&gt;change A value&lt;/button&gt;\n    `,\n    setup: () =&gt; {\n      const value = ref(0)\n      return {\n        value\n      }\n    }\n})\n\nconst Message = {\n  name: 'Message',\n  template: `\n    &lt;div&gt;\n      &lt;span&gt;{{ modelValue }}&lt;/span&gt;\n      &lt;button @click=&quot;$emit('update:modelValue', (modelValue+1))&quot;&gt;change B value&lt;/button&gt;\n    &lt;/div&gt;\n  `,\n  props: {\n    modelValue: Number\n  }\n}\n\nApp.component(Message.name, Message)\n\nApp.mount('#root')\n</code></pre>\n<h2 id=\"thisset\">完全移除this.$set</h2>\n<p>vue3最大的改变之一就是使用<code>Proxy</code>。【Proxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”（meta programming），即对编程语言进行编程。】①</p>\n<p>在项目架构中，分离了响应式系统，vue3中的响应式API可以剥离出来单独使用。</p>\n<pre><code class=\"language-javascript\">import { ref, computed } from '@vue/reactivity'\n\nconst count = ref(1)\nconst plusOne = computed(() =&gt; count.value + 1)\n\nconsole.log(plusOne.value) // 2\n\nplusOne.value++ // error\n</code></pre>\n<h2 id=\"configglobalpropertiesvueprototype\">使用config.globalProperties代替Vue.prototype</h2>\n<p>现在提倡函数式编程，Vue也抛弃了2的new形式实例化一个组件，改用<code>createApp</code>创建，所以我们不能再使用<code>Vue.prototype</code>创建组件通用方法，更改为<code>app.config.globalProperties.attr = () =&gt; {}</code>这种形式。</p>\n<pre><code class=\"language-javascript\">// Before\nVue.prototype.$http = () =&gt; {}\n\n// After\nconst app = Vue.createApp({})\napp.config.globalProperties.$http = () =&gt; {}\n</code></pre>\n<h2 id=\"\">自定义命令的改变</h2>\n<p>vue2自定义指令文档在这里<a href=\"https://vuejs.org/v2/guide/custom-directive.html#Hook-Functions\">https://vuejs.org/v2/guide/custom-directive.html#Hook-Functions</a>，vue3自定义指令文档在这里<a href=\"https://v3.vuejs.org/api/application-api.html#directive\">https://v3.vuejs.org/api/application-api.html#directive</a>。自定义指令在升级过程中暂未发现特别需要注意的地方，按照文档更新即可。</p>\n<pre><code class=\"language-javascript\">// vue2\nVue.directive('demo', {\n  bind: function (el, binding, vnode) {\n    var s = JSON.stringify\n    el.innerHTML =\n      'name: '       + s(binding.name) + '&lt;br&gt;' +\n      'value: '      + s(binding.value) + '&lt;br&gt;' +\n      'expression: ' + s(binding.expression) + '&lt;br&gt;' +\n      'argument: '   + s(binding.arg) + '&lt;br&gt;' +\n      'modifiers: '  + s(binding.modifiers) + '&lt;br&gt;' +\n      'vnode keys: ' + Object.keys(vnode).join(', ')\n  }\n})\n\n// vue3\nimport { createApp } from 'vue'\nconst app = createApp({})\n\n// register\napp.directive('my-directive', {\n  // Directive has a set of lifecycle hooks:\n  // called before bound element's parent component is mounted\n  beforeMount() {},\n  // called when bound element's parent component is mounted\n  mounted() {},\n  // called before the containing component's VNode is updated\n  beforeUpdate() {},\n  // called after the containing component's VNode and the VNodes of its children // have updated\n  updated() {},\n  // called before the bound element's parent component is unmounted\n  beforeUnmount() {},\n  // called when the bound element's parent component is unmounted\n  unmounted() {}\n})\n</code></pre>\n<h2 id=\"nexttick\">nextTick的改变</h2>\n<p>在vue2中，在组件实例上可以使用<code>this.$nextTick</code>，它会在渲染之后调用。在vue3中，它变成了一个全局API，需要<code>import { nextTick } from 'vue'</code>这样引用。vue3节省了一个实例所占用js内存，以下附两张不同版本的实例截图。</p>\n<p>Vue2<br>\n<img src=\"/content/images/2020/09/vue2-1.png\" alt=\"vue2-1\"></p>\n<p>Vue3<br>\n<img src=\"/content/images/2020/09/vue3-1.png\" alt=\"vue3-1\"></p>\n<h2 id=\"definecomponent\">使用definecomponent来进行类型推导</h2>\n<p>当项目中使用typescript时，可以使用definecomponent，它什么也不做，只会进行类型推导，让我们在使用时可以知道参数的类型。<a href=\"https://v3.vuejs.org/api/global-api.html#definecomponent\">https://v3.vuejs.org/api/global-api.html#definecomponent</a></p>\n<pre><code class=\"language-javascript\">import { definecomponent } from 'vue'\nexport default definecomponent({\n  name: '',\n  setup() {\n\n  }\n})\n</code></pre>\n<p>① <a href=\"https://es6.ruanyifeng.com/#docs/proxy#%E6%A6%82%E8%BF%B0\">https://es6.ruanyifeng.com/#docs/proxy#%E6%A6%82%E8%BF%B0</a></p>\n<p>更新时间：2020.09.04</p>\n<!--kg-card-end: markdown-->","comment_id":"5f59ff76a166e50001965a7c","plaintext":"emit 需要主动声明\n在.vue组件中，使用this.$emit('emitName')时，不需要主动声明emit的第一个参数，在vue3中，必须主动声明emits\n，她接受数组，写法如下\n\nexport default {\n  template: `\n    <div @click=\"$emit('click')\"></div>\n  `,\n  emits: ['click']\n}\n\n\n如果不主动声明，在使用组件时监听click事件，会触发两次。\n\nv-model可以指定值，默认为modelValue\n在vue2中使用v-model默认为value（单选框、复选框等类型的输入控件不同），在vue3中支持自定义value，可以使用\nv-model:value=\"value\"支持vue2。也可以用$emit('update:modelValue')支持v-model=\"value\"\n，这取决于你可以（愿意）修改哪部分代码。\n\n以下为修改子组件的形式。更多信息参考https://v3.vuejs.org/guide/migration/v-model.html#overview\n\nimport { createApp, ref } from 'https://unpkg.com/vue@3.0.0-rc.9/dist/vue.esm-browser.js'\n\nconst App = createApp({\n    template: `\n      <message v-model=\"value\" />\n      <button @click=\"value += 1\">change A value</button>\n    `,\n    setup: () => {\n      const value = ref(0)\n      return {\n        value\n      }\n    }\n})\n\nconst Message = {\n  name: 'Message',\n  template: `\n    <div>\n      <span>{{ modelValue }}</span>\n      <button @click=\"$emit('update:modelValue', (modelValue+1))\">change B value</button>\n    </div>\n  `,\n  props: {\n    modelValue: Number\n  }\n}\n\nApp.component(Message.name, Message)\n\nApp.mount('#root')\n\n\n完全移除this.$set\nvue3最大的改变之一就是使用Proxy。【Proxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”（meta\nprogramming），即对编程语言进行编程。】①\n\n在项目架构中，分离了响应式系统，vue3中的响应式API可以剥离出来单独使用。\n\nimport { ref, computed } from '@vue/reactivity'\n\nconst count = ref(1)\nconst plusOne = computed(() => count.value + 1)\n\nconsole.log(plusOne.value) // 2\n\nplusOne.value++ // error\n\n\n使用config.globalProperties代替Vue.prototype\n现在提倡函数式编程，Vue也抛弃了2的new形式实例化一个组件，改用createApp创建，所以我们不能再使用Vue.prototype创建组件通用方法，更改为\napp.config.globalProperties.attr = () => {}这种形式。\n\n// Before\nVue.prototype.$http = () => {}\n\n// After\nconst app = Vue.createApp({})\napp.config.globalProperties.$http = () => {}\n\n\n自定义命令的改变\nvue2自定义指令文档在这里https://vuejs.org/v2/guide/custom-directive.html#Hook-Functions\n，vue3自定义指令文档在这里https://v3.vuejs.org/api/application-api.html#directive\n。自定义指令在升级过程中暂未发现特别需要注意的地方，按照文档更新即可。\n\n// vue2\nVue.directive('demo', {\n  bind: function (el, binding, vnode) {\n    var s = JSON.stringify\n    el.innerHTML =\n      'name: '       + s(binding.name) + '<br>' +\n      'value: '      + s(binding.value) + '<br>' +\n      'expression: ' + s(binding.expression) + '<br>' +\n      'argument: '   + s(binding.arg) + '<br>' +\n      'modifiers: '  + s(binding.modifiers) + '<br>' +\n      'vnode keys: ' + Object.keys(vnode).join(', ')\n  }\n})\n\n// vue3\nimport { createApp } from 'vue'\nconst app = createApp({})\n\n// register\napp.directive('my-directive', {\n  // Directive has a set of lifecycle hooks:\n  // called before bound element's parent component is mounted\n  beforeMount() {},\n  // called when bound element's parent component is mounted\n  mounted() {},\n  // called before the containing component's VNode is updated\n  beforeUpdate() {},\n  // called after the containing component's VNode and the VNodes of its children // have updated\n  updated() {},\n  // called before the bound element's parent component is unmounted\n  beforeUnmount() {},\n  // called when the bound element's parent component is unmounted\n  unmounted() {}\n})\n\n\nnextTick的改变\n在vue2中，在组件实例上可以使用this.$nextTick，它会在渲染之后调用。在vue3中，它变成了一个全局API，需要import { nextTick\n} from 'vue'这样引用。vue3节省了一个实例所占用js内存，以下附两张不同版本的实例截图。\n\nVue2\n\n\nVue3\n\n\n使用definecomponent来进行类型推导\n当项目中使用typescript时，可以使用definecomponent，它什么也不做，只会进行类型推导，让我们在使用时可以知道参数的类型。\nhttps://v3.vuejs.org/api/global-api.html#definecomponent\n\nimport { definecomponent } from 'vue'\nexport default definecomponent({\n  name: '',\n  setup() {\n\n  }\n})\n\n\n① https://es6.ruanyifeng.com/#docs/proxy#%E6%A6%82%E8%BF%B0\n\n更新时间：2020.09.04","feature_image":"/content/images/2020/09/1_oZqGznbYXJfBlvGp5gQlYQ-1.jpeg","featured":1,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2020-09-10 10:27:02","updated_at":"2020-09-10 10:29:59","published_at":"2020-09-04 10:28:00","custom_excerpt":"最近在升级v-easy-components到2.0.0版本时候，发现了一些升级过程中的问题，总结一下，希望能帮到从vue2升级到vue3的项目。","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f69be3104f4220001a8d8b5","uuid":"a7d3bca1-9bc7-459b-abdb-83347d7d6947","title":"用Docker部署sentry的几种方式","slug":"yong-dockerbu-shu-sentryde-ji-chong-fang-shi","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"市场中有很多类似的解决方案，为什么要选择 `sentry` 来做为我们的应用程序BUG检测的解决方案。\\n\\n+ 开源\\n+ 社区比较完善\\n+ 云上有免费额度\\n\\n## 第一种，使用官方的 `onpremise`\\n\\n[onpremise github](https://github.com/getsentry/onpremise)\\n\\n运行sentry之前，你需要满足一下环境。\\n\\n+ 保证你的服务器内存大于2G\\n+ Docker 17.05.0+\\n+ Compose 1.23.0+\\n\\n如果你都满足了，那么接下来就是开始安装了。\\n\\n+ 我们将项目clone下来。\\n`git clone git@github.com:getsentry/onpremise.git`\\n+ 运行`install.sh`\\n`bash install.sh`\\n+ 使用`docker-compoes`后台运行容器\\n`docker-compoes up -d`\\n\\n至此，请使用`IP:9000`连接进行访问，我们可以正常访问sentry的后台。\\n\\n但是你会发现，**用户名和密码**在哪里？接下来，我们需要创建，我们键入`docker-compose run --rm web upgrade`，按照提示输入用户名和密码。\\n\\n`--rm` 代表运行完成后删除容器，仅此运行一次。\\n参数`web`指`yml`里容器的名字，相对应命令是`docker run -it --rm -e SENTRY_SECRET_KEY='<secret-key>' --link sentry-postgres:postgres --link sentry-redis:redis sentry upgrade`\\n\\n\\n## 第二种，使用命令行的形式部署\\n\\n我们找到Docker的HUB，[sentry hub](https://hub.docker.com/_/sentry/)，然后我们按照上面的操作步骤下来，不过注意的是，执行第5步的时候没有将9000端口映射出来，我们需要稍微变更一下。\\n\\n+ `docker run -d --name sentry-redis redis`\\n+ `docker run -d --name sentry-postgres -e POSTGRES_PASSWORD=secret -e POSTGRES_USER=sentry postgres`\\n+ `docker run --rm sentry config generate-secret-key` （保存这里生成的key）\\n+ `docker run -it --rm -e SENTRY_SECRET_KEY='<secret-key>' --link sentry-postgres:postgres --link sentry-redis:redis sentry upgrade` （这里会提示你输入用户名/邮箱和密码）\\n+ `docker run -d --name my-sentry -p 9000:9000 -e SENTRY_SECRET_KEY='<secret-key>' --link sentry-redis:redis --link sentry-postgres:postgres sentry` （注意-p参数）\\n+ `docker run -d --name sentry-cron -e SENTRY_SECRET_KEY='<secret-key>' --link sentry-postgres:postgres --link sentry-redis:redis sentry run cron`\\n+ `docker run -d --name sentry-worker-1 -e SENTRY_SECRET_KEY='<secret-key>' --link sentry-postgres:postgres --link sentry-redis:redis sentry run worker`\\n\\n接下来访问`IP:9000`，输入你第4步键入的邮箱和密码即可登录后台管理系统。\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"<!--kg-card-begin: markdown--><p>市场中有很多类似的解决方案，为什么要选择 <code>sentry</code> 来做为我们的应用程序BUG检测的解决方案。</p>\n<ul>\n<li>开源</li>\n<li>社区比较完善</li>\n<li>云上有免费额度</li>\n</ul>\n<h2 id=\"onpremise\">第一种，使用官方的 <code>onpremise</code></h2>\n<p><a href=\"https://github.com/getsentry/onpremise\">onpremise github</a></p>\n<p>运行sentry之前，你需要满足一下环境。</p>\n<ul>\n<li>保证你的服务器内存大于2G</li>\n<li>Docker 17.05.0+</li>\n<li>Compose 1.23.0+</li>\n</ul>\n<p>如果你都满足了，那么接下来就是开始安装了。</p>\n<ul>\n<li>我们将项目clone下来。<br>\n<code>git clone git@github.com:getsentry/onpremise.git</code></li>\n<li>运行<code>install.sh</code><br>\n<code>bash install.sh</code></li>\n<li>使用<code>docker-compoes</code>后台运行容器<br>\n<code>docker-compoes up -d</code></li>\n</ul>\n<p>至此，请使用<code>IP:9000</code>连接进行访问，我们可以正常访问sentry的后台。</p>\n<p>但是你会发现，<strong>用户名和密码</strong>在哪里？接下来，我们需要创建，我们键入<code>docker-compose run --rm web upgrade</code>，按照提示输入用户名和密码。</p>\n<p><code>--rm</code> 代表运行完成后删除容器，仅此运行一次。<br>\n参数<code>web</code>指<code>yml</code>里容器的名字，相对应命令是<code>docker run -it --rm -e SENTRY_SECRET_KEY='&lt;secret-key&gt;' --link sentry-postgres:postgres --link sentry-redis:redis sentry upgrade</code></p>\n<h2 id=\"\">第二种，使用命令行的形式部署</h2>\n<p>我们找到Docker的HUB，<a href=\"https://hub.docker.com/_/sentry/\">sentry hub</a>，然后我们按照上面的操作步骤下来，不过注意的是，执行第5步的时候没有将9000端口映射出来，我们需要稍微变更一下。</p>\n<ul>\n<li><code>docker run -d --name sentry-redis redis</code></li>\n<li><code>docker run -d --name sentry-postgres -e POSTGRES_PASSWORD=secret -e POSTGRES_USER=sentry postgres</code></li>\n<li><code>docker run --rm sentry config generate-secret-key</code> （保存这里生成的key）</li>\n<li><code>docker run -it --rm -e SENTRY_SECRET_KEY='&lt;secret-key&gt;' --link sentry-postgres:postgres --link sentry-redis:redis sentry upgrade</code> （这里会提示你输入用户名/邮箱和密码）</li>\n<li><code>docker run -d --name my-sentry -p 9000:9000 -e SENTRY_SECRET_KEY='&lt;secret-key&gt;' --link sentry-redis:redis --link sentry-postgres:postgres sentry</code> （注意-p参数）</li>\n<li><code>docker run -d --name sentry-cron -e SENTRY_SECRET_KEY='&lt;secret-key&gt;' --link sentry-postgres:postgres --link sentry-redis:redis sentry run cron</code></li>\n<li><code>docker run -d --name sentry-worker-1 -e SENTRY_SECRET_KEY='&lt;secret-key&gt;' --link sentry-postgres:postgres --link sentry-redis:redis sentry run worker</code></li>\n</ul>\n<p>接下来访问<code>IP:9000</code>，输入你第4步键入的邮箱和密码即可登录后台管理系统。</p>\n<!--kg-card-end: markdown-->","comment_id":"5f69be3104f4220001a8d8b5","plaintext":"市场中有很多类似的解决方案，为什么要选择 sentry 来做为我们的应用程序BUG检测的解决方案。\n\n * 开源\n * 社区比较完善\n * 云上有免费额度\n\n第一种，使用官方的 onpremise\nonpremise github [https://github.com/getsentry/onpremise]\n\n运行sentry之前，你需要满足一下环境。\n\n * 保证你的服务器内存大于2G\n * Docker 17.05.0+\n * Compose 1.23.0+\n\n如果你都满足了，那么接下来就是开始安装了。\n\n * 我们将项目clone下来。\n   git clone git@github.com:getsentry/onpremise.git\n * 运行install.sh\n   bash install.sh\n * 使用docker-compoes后台运行容器\n   docker-compoes up -d\n\n至此，请使用IP:9000连接进行访问，我们可以正常访问sentry的后台。\n\n但是你会发现，用户名和密码在哪里？接下来，我们需要创建，我们键入docker-compose run --rm web upgrade\n，按照提示输入用户名和密码。\n\n--rm 代表运行完成后删除容器，仅此运行一次。\n参数web指yml里容器的名字，相对应命令是docker run -it --rm -e SENTRY_SECRET_KEY='<secret-key>'\n--link sentry-postgres:postgres --link sentry-redis:redis sentry upgrade\n\n第二种，使用命令行的形式部署\n我们找到Docker的HUB，sentry hub [https://hub.docker.com/_/sentry/]\n，然后我们按照上面的操作步骤下来，不过注意的是，执行第5步的时候没有将9000端口映射出来，我们需要稍微变更一下。\n\n * docker run -d --name sentry-redis redis\n * docker run -d --name sentry-postgres -e POSTGRES_PASSWORD=secret -e\n   POSTGRES_USER=sentry postgres\n * docker run --rm sentry config generate-secret-key （保存这里生成的key）\n * docker run -it --rm -e SENTRY_SECRET_KEY='<secret-key>' --link\n   sentry-postgres:postgres --link sentry-redis:redis sentry upgrade \n   （这里会提示你输入用户名/邮箱和密码）\n * docker run -d --name my-sentry -p 9000:9000 -e\n   SENTRY_SECRET_KEY='<secret-key>' --link sentry-redis:redis --link\n   sentry-postgres:postgres sentry （注意-p参数）\n * docker run -d --name sentry-cron -e SENTRY_SECRET_KEY='<secret-key>' --link\n   sentry-postgres:postgres --link sentry-redis:redis sentry run cron\n * docker run -d --name sentry-worker-1 -e SENTRY_SECRET_KEY='<secret-key>'\n   --link sentry-postgres:postgres --link sentry-redis:redis sentry run worker\n\n接下来访问IP:9000，输入你第4步键入的邮箱和密码即可登录后台管理系统。","feature_image":"/content/images/2020/09/docker_codeception-07.jpg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2020-09-22 09:04:49","updated_at":"2020-09-22 09:06:53","published_at":"2020-08-07 09:05:00","custom_excerpt":"`sentry`是什么呢？我在Github上找到了这个答案。  \nReal-time crash reporting for your web apps, mobile apps, and games.","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f69bedb04f4220001a8d8c4","uuid":"71ccb16e-7101-4cbe-a55b-fdaf09017df9","title":"在Vue中使用sentry","slug":"zai-vuezhong-shi-yong-sentry","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"在入口引入`@sentry/browser`和`@sentry/integrations`这两个库，`raven-js`主要是做自定义上传\\n\\n```js\\nimport * as Sentry from '@sentry/browser'\\nimport * as Integrations from '@sentry/integrations'\\nimport Raven from 'raven-js'\\nimport {createApp, h} from 'vue'\\nimport APP from './APP.vue'\\n\\nconst app = createApp({\\n  render() {\\n    return h(APP)\\n  }\\n})\\n\\napp.mount('#app')\\n\\nlet configSentry = {\\n  dsn: '<dsn>',\\n  integrations: [new Integrations.Vue({ Vue: app, attachProps: true })],\\n  debug: true,\\n  beforeSend(event, hint) {\\n    if (event.exception) {\\n      Sentry.showReportDialog({ eventId: event.event_id });\\n    }\\n    return event;\\n  }\\n}\\n\\nif (process.env.NODE_ENV === 'production') {\\n  delete configSentry.debug\\n}\\n\\nSentry.init(configSentry)\\n\\nRaven.config('<dsn>')\\n```\\n\\n这个时候在sentry控制台中能看到错误日志，但是我们项目是经过webpack编译过后的代码，没有办法阅读。这个时候可以利用`@sentry/webpack-plugin`这个webpack插件将生成的map文件上传至控制台，然后就可以在issues中看到详细的错误日志。\\n\\n具体使用实例，更多详细配置请移步[github](https://github.com/getsentry/sentry-webpack-plugin)\\n```js\\nconst SentryPlugin = require('@sentry/webpack-plugin')\\nmodule.exports = {\\n  // ... 其它配置\\n  plugins: [\\n    new SentryPlugin({\\n      include: 'dist',\\n      release: '1.0.1',\\n      debug: true\\n    })\\n  ]\\n}\\n```\\n\\n这个时候需要一些配置，告诉插件我们sentry的地址，我们在项目中创建一个`.sentryclirc`，当然，这个文件也可以创建在项目的上一层目录或这根目录，因为插件会以当前目录为基础，一层一层的往上找。\\n```\\n[auth]\\ntoken = <token>\\ndsn = <dsn>\\n\\n[defaults]\\nurl = <url>\\norg = sentry\\nproject = test\\n```\\n\\nauth:   \\n+ token: 上传凭证，在用户下可以创建一个可读可写的项目token\\n+ dsn: 用于确认上传地址和凭证的`uri`，组成部分`{PROTOCOL}://{PUBLIC_KEY}:{SECRET_KEY}@{HOST}/{PATH}{PROJECT_ID}`\\n\\ndefaults:   \\n+ url: sentry的地址\\n+ org: 组织名称\\n+ project: 项目名称i\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"<!--kg-card-begin: markdown--><p>在入口引入<code>@sentry/browser</code>和<code>@sentry/integrations</code>这两个库，<code>raven-js</code>主要是做自定义上传</p>\n<pre><code class=\"language-js\">import * as Sentry from '@sentry/browser'\nimport * as Integrations from '@sentry/integrations'\nimport Raven from 'raven-js'\nimport {createApp, h} from 'vue'\nimport APP from './APP.vue'\n\nconst app = createApp({\n  render() {\n    return h(APP)\n  }\n})\n\napp.mount('#app')\n\nlet configSentry = {\n  dsn: '&lt;dsn&gt;',\n  integrations: [new Integrations.Vue({ Vue: app, attachProps: true })],\n  debug: true,\n  beforeSend(event, hint) {\n    if (event.exception) {\n      Sentry.showReportDialog({ eventId: event.event_id });\n    }\n    return event;\n  }\n}\n\nif (process.env.NODE_ENV === 'production') {\n  delete configSentry.debug\n}\n\nSentry.init(configSentry)\n\nRaven.config('&lt;dsn&gt;')\n</code></pre>\n<p>这个时候在sentry控制台中能看到错误日志，但是我们项目是经过webpack编译过后的代码，没有办法阅读。这个时候可以利用<code>@sentry/webpack-plugin</code>这个webpack插件将生成的map文件上传至控制台，然后就可以在issues中看到详细的错误日志。</p>\n<p>具体使用实例，更多详细配置请移步<a href=\"https://github.com/getsentry/sentry-webpack-plugin\">github</a></p>\n<pre><code class=\"language-js\">const SentryPlugin = require('@sentry/webpack-plugin')\nmodule.exports = {\n  // ... 其它配置\n  plugins: [\n    new SentryPlugin({\n      include: 'dist',\n      release: '1.0.1',\n      debug: true\n    })\n  ]\n}\n</code></pre>\n<p>这个时候需要一些配置，告诉插件我们sentry的地址，我们在项目中创建一个<code>.sentryclirc</code>，当然，这个文件也可以创建在项目的上一层目录或这根目录，因为插件会以当前目录为基础，一层一层的往上找。</p>\n<pre><code>[auth]\ntoken = &lt;token&gt;\ndsn = &lt;dsn&gt;\n\n[defaults]\nurl = &lt;url&gt;\norg = sentry\nproject = test\n</code></pre>\n<p>auth:</p>\n<ul>\n<li>token: 上传凭证，在用户下可以创建一个可读可写的项目token</li>\n<li>dsn: 用于确认上传地址和凭证的<code>uri</code>，组成部分<code>{PROTOCOL}://{PUBLIC_KEY}:{SECRET_KEY}@{HOST}/{PATH}{PROJECT_ID}</code></li>\n</ul>\n<p>defaults:</p>\n<ul>\n<li>url: sentry的地址</li>\n<li>org: 组织名称</li>\n<li>project: 项目名称i</li>\n</ul>\n<!--kg-card-end: markdown-->","comment_id":"5f69bedb04f4220001a8d8c4","plaintext":"在入口引入@sentry/browser和@sentry/integrations这两个库，raven-js主要是做自定义上传\n\nimport * as Sentry from '@sentry/browser'\nimport * as Integrations from '@sentry/integrations'\nimport Raven from 'raven-js'\nimport {createApp, h} from 'vue'\nimport APP from './APP.vue'\n\nconst app = createApp({\n  render() {\n    return h(APP)\n  }\n})\n\napp.mount('#app')\n\nlet configSentry = {\n  dsn: '<dsn>',\n  integrations: [new Integrations.Vue({ Vue: app, attachProps: true })],\n  debug: true,\n  beforeSend(event, hint) {\n    if (event.exception) {\n      Sentry.showReportDialog({ eventId: event.event_id });\n    }\n    return event;\n  }\n}\n\nif (process.env.NODE_ENV === 'production') {\n  delete configSentry.debug\n}\n\nSentry.init(configSentry)\n\nRaven.config('<dsn>')\n\n\n这个时候在sentry控制台中能看到错误日志，但是我们项目是经过webpack编译过后的代码，没有办法阅读。这个时候可以利用\n@sentry/webpack-plugin这个webpack插件将生成的map文件上传至控制台，然后就可以在issues中看到详细的错误日志。\n\n具体使用实例，更多详细配置请移步github [https://github.com/getsentry/sentry-webpack-plugin]\n\nconst SentryPlugin = require('@sentry/webpack-plugin')\nmodule.exports = {\n  // ... 其它配置\n  plugins: [\n    new SentryPlugin({\n      include: 'dist',\n      release: '1.0.1',\n      debug: true\n    })\n  ]\n}\n\n\n这个时候需要一些配置，告诉插件我们sentry的地址，我们在项目中创建一个.sentryclirc\n，当然，这个文件也可以创建在项目的上一层目录或这根目录，因为插件会以当前目录为基础，一层一层的往上找。\n\n[auth]\ntoken = <token>\ndsn = <dsn>\n\n[defaults]\nurl = <url>\norg = sentry\nproject = test\n\n\nauth:\n\n * token: 上传凭证，在用户下可以创建一个可读可写的项目token\n * dsn: 用于确认上传地址和凭证的uri，组成部分\n   {PROTOCOL}://{PUBLIC_KEY}:{SECRET_KEY}@{HOST}/{PATH}{PROJECT_ID}\n\ndefaults:\n\n * url: sentry的地址\n * org: 组织名称\n * project: 项目名称i","feature_image":"/content/images/2020/09/68747470733a2f2f73656e7472792d6272616e642e73746f726167652e676f6f676c65617069732e636f6d2f73656e7472792d6c6f676f2d626c61636b2e706e67.png","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2020-09-22 09:07:39","updated_at":"2020-09-22 09:09:01","published_at":"2020-08-07 09:08:00","custom_excerpt":"sentry支持多个平台，在新建项目的时候可以发现支持数十种平台。以vue-next项目为例","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f69bf4204f4220001a8d8d4","uuid":"33f1622e-0944-4a86-a386-763cd47c1e2a","title":"centos中service的配置-踩坑","slug":"centoszhong-servicede-pei-zhi-cai-keng","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"### 第一个坑\\n\\n`ExecStart`参数中不能使用相对路径，必须使用绝对路径。可以设置`WorkingDirectory`的值来改变工作目录。\\n\\n比如我在bash中使用`python3 manage.py runserver 0.0.0.0:8000`，而在`ExecStart`中使用`python3 manage.py runserver 0.0.0.0:8000`会报错。\\n\\n### 第二个坑\\n\\n`[Service]`中的`Type`的值必须要符合自己的应用程序，我的应用程序为api服务，所以将其设置为默认值`simple`。[https://www.freedesktop.org/software/systemd/man/systemd.service.html](https://www.freedesktop.org/software/systemd/man/systemd.service.html)\\n\\n如果服务成功启动，会有一下日志。  \\n在控制台中`systemctl status xxxx.service`\\n```log\\nsys-albums.service - xxxx.service\\n   Loaded: loaded (/usr/lib/systemd/system/sys-xxxx.service; disabled; vendor preset: disabled)\\n   Active: active (running) since Wed 2020-07-08 17:43:12 CST; 21min ago\\n Main PID: 8283 (python3)\\n   Memory: 53.1M\\n   CGroup: /system.slice/sys-xxxx.service\\n           ├─8283 /usr/bin/python3 manage.py runserver 0.0.0.0:xxxx\\n```\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"<!--kg-card-begin: markdown--><h3 id=\"\">第一个坑</h3>\n<p><code>ExecStart</code>参数中不能使用相对路径，必须使用绝对路径。可以设置<code>WorkingDirectory</code>的值来改变工作目录。</p>\n<p>比如我在bash中使用<code>python3 manage.py runserver 0.0.0.0:8000</code>，而在<code>ExecStart</code>中使用<code>python3 manage.py runserver 0.0.0.0:8000</code>会报错。</p>\n<h3 id=\"\">第二个坑</h3>\n<p><code>[Service]</code>中的<code>Type</code>的值必须要符合自己的应用程序，我的应用程序为api服务，所以将其设置为默认值<code>simple</code>。<a href=\"https://www.freedesktop.org/software/systemd/man/systemd.service.html\">https://www.freedesktop.org/software/systemd/man/systemd.service.html</a></p>\n<p>如果服务成功启动，会有一下日志。<br>\n在控制台中<code>systemctl status xxxx.service</code></p>\n<pre><code class=\"language-log\">sys-albums.service - xxxx.service\n   Loaded: loaded (/usr/lib/systemd/system/sys-xxxx.service; disabled; vendor preset: disabled)\n   Active: active (running) since Wed 2020-07-08 17:43:12 CST; 21min ago\n Main PID: 8283 (python3)\n   Memory: 53.1M\n   CGroup: /system.slice/sys-xxxx.service\n           ├─8283 /usr/bin/python3 manage.py runserver 0.0.0.0:xxxx\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"5f69bf4204f4220001a8d8d4","plaintext":"第一个坑\nExecStart参数中不能使用相对路径，必须使用绝对路径。可以设置WorkingDirectory的值来改变工作目录。\n\n比如我在bash中使用python3 manage.py runserver 0.0.0.0:8000，而在ExecStart中使用python3\nmanage.py runserver 0.0.0.0:8000会报错。\n\n第二个坑\n[Service]中的Type的值必须要符合自己的应用程序，我的应用程序为api服务，所以将其设置为默认值simple。\nhttps://www.freedesktop.org/software/systemd/man/systemd.service.html\n\n如果服务成功启动，会有一下日志。\n在控制台中systemctl status xxxx.service\n\nsys-albums.service - xxxx.service\n   Loaded: loaded (/usr/lib/systemd/system/sys-xxxx.service; disabled; vendor preset: disabled)\n   Active: active (running) since Wed 2020-07-08 17:43:12 CST; 21min ago\n Main PID: 8283 (python3)\n   Memory: 53.1M\n   CGroup: /system.slice/sys-xxxx.service\n           ├─8283 /usr/bin/python3 manage.py runserver 0.0.0.0:xxxx","feature_image":"/content/images/2020/09/logo_centos.png","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2020-09-22 09:09:22","updated_at":"2020-09-22 09:11:45","published_at":"2020-07-08 09:11:00","custom_excerpt":"服务单元，你可以理解为系统服务和原来的init.d下面的服务一样，只是比它更加丰富。每一个服务都是以.service进行标识的","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f69bff204f4220001a8d8e1","uuid":"2540db3a-92a1-4d50-a3f4-0b28265a8d8a","title":"docker不同容器中的网络通信","slug":"dockerbu-tong-rong-qi-zhong-de-wang-luo-tong-xin","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"- bridge: 默认的网络驱动模式。如果不指定驱动程序，bridge 便会作为默认的网络驱动模式。当应用程序运行在需要通信的独立容器 (standalone containers) 中时，通常会选择 bridge 模式。\\n- host：移除容器和 Docker 宿主机之间的网络隔离，并直接使用主机的网络。host 模式仅适用于 Docker 17.06+。\\n- overlay：overlay 网络将多个 Docker 守护进程连接在一起，并使集群服务能够相互通信。您还可以使用 overlay 网络来实现 swarm 集群和独立容器之间的通信，或者不同 Docker 守护进程上的两个独立容器之间的通信。该策略实现了在这些容器之间进行操作系统级别路由的需求。\\n- macvlan：Macvlan 网络允许为容器分配 MAC 地址，使其显示为网络上的物理设备。 Docker 守护进程通过其 MAC 地址将流量路由到容器。对于希望直连到物理网络的传统应用程序而言，使用 macvlan 模式一般是最佳选择，而不应该通过 Docker 宿主机的网络进行路由。\\n- none：对于此容器，禁用所有联网。通常与自定义网络驱动程序一起使用。none 模式不适用于集群服务。\\n\\n配置实例：\\n\\n```yaml\\nnetworks:\\n  mongo:\\n    name: mongo\\n    driver: bridge\\n```\\n\\n我们可以通过`mongo`这个网络驱动，为不同容器提供网络通信。\\n\\ndocker-compose.yml\\n\\n```yaml\\nversion: '3.8'\\nnetworks:\\n  mongo:\\n    name: mongo\\n    driver: bridge\\nservices:\\n  db:\\n    image: mongo\\n    ports:\\n      - 27017:27017\\n    networks:\\n      - mongo\\n  wait:\\n    build: .\\n    networks:\\n      - mongo\\n    depends_on:\\n      - db\\n    command: /bin/sh wait.sh\\n```\\n\\n在 yml 配置文件中，我们配置了一个 wait 容器和 db 容器，他们使用`mongo`网络环境。\\n\\n下面是`Dockerfile`配置文件，基于`alpine`（[Alpine Linux](https://alpinelinux.org/) is a Linux distribution built around [musl libc](https://www.musl-libc.org/) and [BusyBox](https://www.busybox.net/)）\\nDockerfile\\n\\n```\\nFROM alpine\\n\\nWORKDIR /app\\n\\nADD wait.sh /app\\n```\\n\\n`wait.sh`就是让脚本暂停，方便我们 bash 时进行操作。\\n\\n```sh\\n#!/usr/bin/env bash\\n\\nsleep 1000\\n```\\n\\n在容器运行过程中我们可以使用`docker exec -it <docker id> ping db`命令，看看能否正常与 db 容器通信，然后再使用`docker exec -it <docker id> ping db:27017`看看端口是否开启。\\n\\n```\\nλ docker exec -it a0efed4a8d9b ping -c 2 db\\nPING db (172.19.0.2): 56 data bytes\\n64 bytes from 172.19.0.2: seq=0 ttl=64 time=0.169 ms\\n64 bytes from 172.19.0.2: seq=1 ttl=64 time=0.096 ms\\n\\n--- db ping statistics ---\\n2 packets transmitted, 2 packets received, 0% packet loss\\nround-trip min/avg/max = 0.096/0.132/0.169 ms\\n```\\n\\n这个时候我们运行一下`docker network ls`，看看运行的`network`的 ID，然后再输入`docker network inspect <network id>`\\n\\n```\\nλ docker network inspect <network id>\\n[\\n    {\\n        \\\"Name\\\": \\\"mongo\\\",\\n        \\\"Id\\\": \\\"92d630eadafa764dd40e3145b76f99d700f1d4a198d9ef2a8d73db440c020efd\\\",\\n        \\\"Created\\\": \\\"2020-08-10T09:06:59.2047684Z\\\",\\n        \\\"Scope\\\": \\\"local\\\",\\n        \\\"Driver\\\": \\\"bridge\\\",\\n        \\\"EnableIPv6\\\": false,\\n        \\\"IPAM\\\": {\\n            \\\"Driver\\\": \\\"default\\\",\\n            \\\"Options\\\": null,\\n            \\\"Config\\\": [\\n                {\\n                    \\\"Subnet\\\": \\\"172.19.0.0/16\\\",\\n                    \\\"Gateway\\\": \\\"172.19.0.1\\\"\\n                }\\n            ]\\n        },\\n        \\\"Internal\\\": false,\\n        \\\"Attachable\\\": true,\\n        \\\"Ingress\\\": false,\\n        \\\"ConfigFrom\\\": {\\n            \\\"Network\\\": \\\"\\\"\\n        },\\n        \\\"ConfigOnly\\\": false,\\n        \\\"Containers\\\": {\\n            \\\"82025ba1fe6836858287fe4841b377744ab78a0adf83400b21736a4deb353edf\\\": {\\n                \\\"Name\\\": \\\"network_db_1\\\",\\n                \\\"EndpointID\\\": \\\"cb4701b86ad30d3731fb92c58279bc6fd42cef5725254ecfab218d2ee8f45523\\\",\\n                \\\"MacAddress\\\": \\\"02:42:ac:13:00:02\\\",\\n                \\\"IPv4Address\\\": \\\"172.19.0.2/16\\\",\\n                \\\"IPv6Address\\\": \\\"\\\"\\n            },\\n            \\\"a0efed4a8d9b2df37d55e17eb77f9955481c7ff397bd7a3521a738c64edb3383\\\": {\\n                \\\"Name\\\": \\\"network_wait_1\\\",\\n                \\\"EndpointID\\\": \\\"1f20117a0cbda05b26b6479a1681050a5560147875cc467daa18bf420c8074fe\\\",\\n                \\\"MacAddress\\\": \\\"02:42:ac:13:00:03\\\",\\n                \\\"IPv4Address\\\": \\\"172.19.0.3/16\\\",\\n                \\\"IPv6Address\\\": \\\"\\\"\\n            }\\n        },\\n        \\\"Options\\\": {},\\n        \\\"Labels\\\": {\\n            \\\"com.docker.compose.network\\\": \\\"mongo\\\",\\n            \\\"com.docker.compose.project\\\": \\\"house\\\",\\n            \\\"com.docker.compose.version\\\": \\\"1.26.2\\\"\\n        }\\n    }\\n]\\n```\\n\\n上面我们可以看到有两个容器在这个网络环境中，`Containers`对象中包含了这两个容器的网络状态。\\n\\n- Name：容器名称\\n- MacAddress：容器的 MAC 地址\\n- IPv4Address：容器的 IPV4 地址\\n- IPv6Address：容器的 IPV6 地址\\n\\n上述就是使用`docker-compose.yml`进行`network`通信。非`docker-compose`的形式请参考[https://docs.docker.com/network/bridge/](https://docs.docker.com/network/bridge/)\\n\\n## docker 建立用户网络\\n\\n`docker network create my-net`，创建一个名为`my-net`的网络，然后再使用`docker network connect my-net my-nginx`将已经运行的`my-nginx`容器加入到`my-net`网络。  \\n也可以使用下面命令，在容器启动的时候添加`--network`参数，将容器运行在特定的网络环境下\\n\\n```shell\\n$ docker create --name my-nginx \\\\\\n  --network my-net \\\\\\n  --publish 8080:80 \\\\\\n  nginx:latest\\n```\\n\\n如果想断开网络，可以使用`docker network disconnect my-net my-nginx`\\n\\n## nginx 代理到其它容器中的端口上\\n\\n在前后端分离的背景下，我们使用`nginx`提供 web 服务。使用 docker 部署 nginx 时，会遇到代理到不同容器中端口的问题，下面就讲讲如何去解决这一个问题。\\n\\n第一种，我们使用`host`网络模式，这会让 nginx 容器置身于主机环境下，共用相同的网络。  \\n第二种，我们使用容器名进行桥接。\\n先看看`docker-compose.yml`配置。\\n\\n```yaml\\nversion: '3.8'\\nservices:\\n  dashboard:\\n    image: mongo\\n  nginx:\\n    image: nginx\\n```\\n\\n这里是`nginx.conf`配置。\\n\\n```\\nserver {\\n    listen 80;\\n    server_name _;\\n\\n    location /api {\\n        proxy_set_header        X-Real_IP       $remote_addr;\\n        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;\\n        proxy_set_header        X-NginX-Proxy   true;\\n        proxy_set_header        Host            $http_host;\\n        proxy_set_header        Upgrade         $http_upgrade;\\n        proxy_pass              http://dashboard:9090; # <容器名>\\n    }\\n}\\n```\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"<!--kg-card-begin: markdown--><ul>\n<li>bridge: 默认的网络驱动模式。如果不指定驱动程序，bridge 便会作为默认的网络驱动模式。当应用程序运行在需要通信的独立容器 (standalone containers) 中时，通常会选择 bridge 模式。</li>\n<li>host：移除容器和 Docker 宿主机之间的网络隔离，并直接使用主机的网络。host 模式仅适用于 Docker 17.06+。</li>\n<li>overlay：overlay 网络将多个 Docker 守护进程连接在一起，并使集群服务能够相互通信。您还可以使用 overlay 网络来实现 swarm 集群和独立容器之间的通信，或者不同 Docker 守护进程上的两个独立容器之间的通信。该策略实现了在这些容器之间进行操作系统级别路由的需求。</li>\n<li>macvlan：Macvlan 网络允许为容器分配 MAC 地址，使其显示为网络上的物理设备。 Docker 守护进程通过其 MAC 地址将流量路由到容器。对于希望直连到物理网络的传统应用程序而言，使用 macvlan 模式一般是最佳选择，而不应该通过 Docker 宿主机的网络进行路由。</li>\n<li>none：对于此容器，禁用所有联网。通常与自定义网络驱动程序一起使用。none 模式不适用于集群服务。</li>\n</ul>\n<p>配置实例：</p>\n<pre><code class=\"language-yaml\">networks:\n  mongo:\n    name: mongo\n    driver: bridge\n</code></pre>\n<p>我们可以通过<code>mongo</code>这个网络驱动，为不同容器提供网络通信。</p>\n<p>docker-compose.yml</p>\n<pre><code class=\"language-yaml\">version: '3.8'\nnetworks:\n  mongo:\n    name: mongo\n    driver: bridge\nservices:\n  db:\n    image: mongo\n    ports:\n      - 27017:27017\n    networks:\n      - mongo\n  wait:\n    build: .\n    networks:\n      - mongo\n    depends_on:\n      - db\n    command: /bin/sh wait.sh\n</code></pre>\n<p>在 yml 配置文件中，我们配置了一个 wait 容器和 db 容器，他们使用<code>mongo</code>网络环境。</p>\n<p>下面是<code>Dockerfile</code>配置文件，基于<code>alpine</code>（<a href=\"https://alpinelinux.org/\">Alpine Linux</a> is a Linux distribution built around <a href=\"https://www.musl-libc.org/\">musl libc</a> and <a href=\"https://www.busybox.net/\">BusyBox</a>）<br>\nDockerfile</p>\n<pre><code>FROM alpine\n\nWORKDIR /app\n\nADD wait.sh /app\n</code></pre>\n<p><code>wait.sh</code>就是让脚本暂停，方便我们 bash 时进行操作。</p>\n<pre><code class=\"language-sh\">#!/usr/bin/env bash\n\nsleep 1000\n</code></pre>\n<p>在容器运行过程中我们可以使用<code>docker exec -it &lt;docker id&gt; ping db</code>命令，看看能否正常与 db 容器通信，然后再使用<code>docker exec -it &lt;docker id&gt; ping db:27017</code>看看端口是否开启。</p>\n<pre><code>λ docker exec -it a0efed4a8d9b ping -c 2 db\nPING db (172.19.0.2): 56 data bytes\n64 bytes from 172.19.0.2: seq=0 ttl=64 time=0.169 ms\n64 bytes from 172.19.0.2: seq=1 ttl=64 time=0.096 ms\n\n--- db ping statistics ---\n2 packets transmitted, 2 packets received, 0% packet loss\nround-trip min/avg/max = 0.096/0.132/0.169 ms\n</code></pre>\n<p>这个时候我们运行一下<code>docker network ls</code>，看看运行的<code>network</code>的 ID，然后再输入<code>docker network inspect &lt;network id&gt;</code></p>\n<pre><code>λ docker network inspect &lt;network id&gt;\n[\n    {\n        &quot;Name&quot;: &quot;mongo&quot;,\n        &quot;Id&quot;: &quot;92d630eadafa764dd40e3145b76f99d700f1d4a198d9ef2a8d73db440c020efd&quot;,\n        &quot;Created&quot;: &quot;2020-08-10T09:06:59.2047684Z&quot;,\n        &quot;Scope&quot;: &quot;local&quot;,\n        &quot;Driver&quot;: &quot;bridge&quot;,\n        &quot;EnableIPv6&quot;: false,\n        &quot;IPAM&quot;: {\n            &quot;Driver&quot;: &quot;default&quot;,\n            &quot;Options&quot;: null,\n            &quot;Config&quot;: [\n                {\n                    &quot;Subnet&quot;: &quot;172.19.0.0/16&quot;,\n                    &quot;Gateway&quot;: &quot;172.19.0.1&quot;\n                }\n            ]\n        },\n        &quot;Internal&quot;: false,\n        &quot;Attachable&quot;: true,\n        &quot;Ingress&quot;: false,\n        &quot;ConfigFrom&quot;: {\n            &quot;Network&quot;: &quot;&quot;\n        },\n        &quot;ConfigOnly&quot;: false,\n        &quot;Containers&quot;: {\n            &quot;82025ba1fe6836858287fe4841b377744ab78a0adf83400b21736a4deb353edf&quot;: {\n                &quot;Name&quot;: &quot;network_db_1&quot;,\n                &quot;EndpointID&quot;: &quot;cb4701b86ad30d3731fb92c58279bc6fd42cef5725254ecfab218d2ee8f45523&quot;,\n                &quot;MacAddress&quot;: &quot;02:42:ac:13:00:02&quot;,\n                &quot;IPv4Address&quot;: &quot;172.19.0.2/16&quot;,\n                &quot;IPv6Address&quot;: &quot;&quot;\n            },\n            &quot;a0efed4a8d9b2df37d55e17eb77f9955481c7ff397bd7a3521a738c64edb3383&quot;: {\n                &quot;Name&quot;: &quot;network_wait_1&quot;,\n                &quot;EndpointID&quot;: &quot;1f20117a0cbda05b26b6479a1681050a5560147875cc467daa18bf420c8074fe&quot;,\n                &quot;MacAddress&quot;: &quot;02:42:ac:13:00:03&quot;,\n                &quot;IPv4Address&quot;: &quot;172.19.0.3/16&quot;,\n                &quot;IPv6Address&quot;: &quot;&quot;\n            }\n        },\n        &quot;Options&quot;: {},\n        &quot;Labels&quot;: {\n            &quot;com.docker.compose.network&quot;: &quot;mongo&quot;,\n            &quot;com.docker.compose.project&quot;: &quot;house&quot;,\n            &quot;com.docker.compose.version&quot;: &quot;1.26.2&quot;\n        }\n    }\n]\n</code></pre>\n<p>上面我们可以看到有两个容器在这个网络环境中，<code>Containers</code>对象中包含了这两个容器的网络状态。</p>\n<ul>\n<li>Name：容器名称</li>\n<li>MacAddress：容器的 MAC 地址</li>\n<li>IPv4Address：容器的 IPV4 地址</li>\n<li>IPv6Address：容器的 IPV6 地址</li>\n</ul>\n<p>上述就是使用<code>docker-compose.yml</code>进行<code>network</code>通信。非<code>docker-compose</code>的形式请参考<a href=\"https://docs.docker.com/network/bridge/\">https://docs.docker.com/network/bridge/</a></p>\n<h2 id=\"docker\">docker 建立用户网络</h2>\n<p><code>docker network create my-net</code>，创建一个名为<code>my-net</code>的网络，然后再使用<code>docker network connect my-net my-nginx</code>将已经运行的<code>my-nginx</code>容器加入到<code>my-net</code>网络。<br>\n也可以使用下面命令，在容器启动的时候添加<code>--network</code>参数，将容器运行在特定的网络环境下</p>\n<pre><code class=\"language-shell\">$ docker create --name my-nginx \\\n  --network my-net \\\n  --publish 8080:80 \\\n  nginx:latest\n</code></pre>\n<p>如果想断开网络，可以使用<code>docker network disconnect my-net my-nginx</code></p>\n<h2 id=\"nginx\">nginx 代理到其它容器中的端口上</h2>\n<p>在前后端分离的背景下，我们使用<code>nginx</code>提供 web 服务。使用 docker 部署 nginx 时，会遇到代理到不同容器中端口的问题，下面就讲讲如何去解决这一个问题。</p>\n<p>第一种，我们使用<code>host</code>网络模式，这会让 nginx 容器置身于主机环境下，共用相同的网络。<br>\n第二种，我们使用容器名进行桥接。<br>\n先看看<code>docker-compose.yml</code>配置。</p>\n<pre><code class=\"language-yaml\">version: '3.8'\nservices:\n  dashboard:\n    image: mongo\n  nginx:\n    image: nginx\n</code></pre>\n<p>这里是<code>nginx.conf</code>配置。</p>\n<pre><code>server {\n    listen 80;\n    server_name _;\n\n    location /api {\n        proxy_set_header        X-Real_IP       $remote_addr;\n        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header        X-NginX-Proxy   true;\n        proxy_set_header        Host            $http_host;\n        proxy_set_header        Upgrade         $http_upgrade;\n        proxy_pass              http://dashboard:9090; # &lt;容器名&gt;\n    }\n}\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"5f69bff204f4220001a8d8e1","plaintext":" * bridge: 默认的网络驱动模式。如果不指定驱动程序，bridge 便会作为默认的网络驱动模式。当应用程序运行在需要通信的独立容器\n   (standalone containers) 中时，通常会选择 bridge 模式。\n * host：移除容器和 Docker 宿主机之间的网络隔离，并直接使用主机的网络。host 模式仅适用于 Docker 17.06+。\n * overlay：overlay 网络将多个 Docker 守护进程连接在一起，并使集群服务能够相互通信。您还可以使用 overlay 网络来实现\n   swarm 集群和独立容器之间的通信，或者不同 Docker 守护进程上的两个独立容器之间的通信。该策略实现了在这些容器之间进行操作系统级别路由的需求。\n * macvlan：Macvlan 网络允许为容器分配 MAC 地址，使其显示为网络上的物理设备。 Docker 守护进程通过其 MAC\n   地址将流量路由到容器。对于希望直连到物理网络的传统应用程序而言，使用 macvlan 模式一般是最佳选择，而不应该通过 Docker\n   宿主机的网络进行路由。\n * none：对于此容器，禁用所有联网。通常与自定义网络驱动程序一起使用。none 模式不适用于集群服务。\n\n配置实例：\n\nnetworks:\n  mongo:\n    name: mongo\n    driver: bridge\n\n\n我们可以通过mongo这个网络驱动，为不同容器提供网络通信。\n\ndocker-compose.yml\n\nversion: '3.8'\nnetworks:\n  mongo:\n    name: mongo\n    driver: bridge\nservices:\n  db:\n    image: mongo\n    ports:\n      - 27017:27017\n    networks:\n      - mongo\n  wait:\n    build: .\n    networks:\n      - mongo\n    depends_on:\n      - db\n    command: /bin/sh wait.sh\n\n\n在 yml 配置文件中，我们配置了一个 wait 容器和 db 容器，他们使用mongo网络环境。\n\n下面是Dockerfile配置文件，基于alpine（Alpine Linux [https://alpinelinux.org/] is a Linux\ndistribution built around musl libc [https://www.musl-libc.org/] and BusyBox\n[https://www.busybox.net/]）\nDockerfile\n\nFROM alpine\n\nWORKDIR /app\n\nADD wait.sh /app\n\n\nwait.sh就是让脚本暂停，方便我们 bash 时进行操作。\n\n#!/usr/bin/env bash\n\nsleep 1000\n\n\n在容器运行过程中我们可以使用docker exec -it <docker id> ping db命令，看看能否正常与 db 容器通信，然后再使用docker\nexec -it <docker id> ping db:27017看看端口是否开启。\n\nλ docker exec -it a0efed4a8d9b ping -c 2 db\nPING db (172.19.0.2): 56 data bytes\n64 bytes from 172.19.0.2: seq=0 ttl=64 time=0.169 ms\n64 bytes from 172.19.0.2: seq=1 ttl=64 time=0.096 ms\n\n--- db ping statistics ---\n2 packets transmitted, 2 packets received, 0% packet loss\nround-trip min/avg/max = 0.096/0.132/0.169 ms\n\n\n这个时候我们运行一下docker network ls，看看运行的network的 ID，然后再输入docker network inspect\n<network id>\n\nλ docker network inspect <network id>\n[\n    {\n        \"Name\": \"mongo\",\n        \"Id\": \"92d630eadafa764dd40e3145b76f99d700f1d4a198d9ef2a8d73db440c020efd\",\n        \"Created\": \"2020-08-10T09:06:59.2047684Z\",\n        \"Scope\": \"local\",\n        \"Driver\": \"bridge\",\n        \"EnableIPv6\": false,\n        \"IPAM\": {\n            \"Driver\": \"default\",\n            \"Options\": null,\n            \"Config\": [\n                {\n                    \"Subnet\": \"172.19.0.0/16\",\n                    \"Gateway\": \"172.19.0.1\"\n                }\n            ]\n        },\n        \"Internal\": false,\n        \"Attachable\": true,\n        \"Ingress\": false,\n        \"ConfigFrom\": {\n            \"Network\": \"\"\n        },\n        \"ConfigOnly\": false,\n        \"Containers\": {\n            \"82025ba1fe6836858287fe4841b377744ab78a0adf83400b21736a4deb353edf\": {\n                \"Name\": \"network_db_1\",\n                \"EndpointID\": \"cb4701b86ad30d3731fb92c58279bc6fd42cef5725254ecfab218d2ee8f45523\",\n                \"MacAddress\": \"02:42:ac:13:00:02\",\n                \"IPv4Address\": \"172.19.0.2/16\",\n                \"IPv6Address\": \"\"\n            },\n            \"a0efed4a8d9b2df37d55e17eb77f9955481c7ff397bd7a3521a738c64edb3383\": {\n                \"Name\": \"network_wait_1\",\n                \"EndpointID\": \"1f20117a0cbda05b26b6479a1681050a5560147875cc467daa18bf420c8074fe\",\n                \"MacAddress\": \"02:42:ac:13:00:03\",\n                \"IPv4Address\": \"172.19.0.3/16\",\n                \"IPv6Address\": \"\"\n            }\n        },\n        \"Options\": {},\n        \"Labels\": {\n            \"com.docker.compose.network\": \"mongo\",\n            \"com.docker.compose.project\": \"house\",\n            \"com.docker.compose.version\": \"1.26.2\"\n        }\n    }\n]\n\n\n上面我们可以看到有两个容器在这个网络环境中，Containers对象中包含了这两个容器的网络状态。\n\n * Name：容器名称\n * MacAddress：容器的 MAC 地址\n * IPv4Address：容器的 IPV4 地址\n * IPv6Address：容器的 IPV6 地址\n\n上述就是使用docker-compose.yml进行network通信。非docker-compose的形式请参考\nhttps://docs.docker.com/network/bridge/\n\ndocker 建立用户网络\ndocker network create my-net，创建一个名为my-net的网络，然后再使用docker network connect my-net\nmy-nginx将已经运行的my-nginx容器加入到my-net网络。\n也可以使用下面命令，在容器启动的时候添加--network参数，将容器运行在特定的网络环境下\n\n$ docker create --name my-nginx \\\n  --network my-net \\\n  --publish 8080:80 \\\n  nginx:latest\n\n\n如果想断开网络，可以使用docker network disconnect my-net my-nginx\n\nnginx 代理到其它容器中的端口上\n在前后端分离的背景下，我们使用nginx提供 web 服务。使用 docker 部署 nginx\n时，会遇到代理到不同容器中端口的问题，下面就讲讲如何去解决这一个问题。\n\n第一种，我们使用host网络模式，这会让 nginx 容器置身于主机环境下，共用相同的网络。\n第二种，我们使用容器名进行桥接。\n先看看docker-compose.yml配置。\n\nversion: '3.8'\nservices:\n  dashboard:\n    image: mongo\n  nginx:\n    image: nginx\n\n\n这里是nginx.conf配置。\n\nserver {\n    listen 80;\n    server_name _;\n\n    location /api {\n        proxy_set_header        X-Real_IP       $remote_addr;\n        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header        X-NginX-Proxy   true;\n        proxy_set_header        Host            $http_host;\n        proxy_set_header        Upgrade         $http_upgrade;\n        proxy_pass              http://dashboard:9090; # <容器名>\n    }\n}","feature_image":"/content/images/2020/09/CNN-Model-1-1024x703.png","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2020-09-22 09:12:18","updated_at":"2020-09-22 09:14:08","published_at":"2020-08-10 09:13:00","custom_excerpt":"在 docker 中我们可以借助`network`这个子级命令，它提供容器之间的通信，分为以下 5 种驱动模式。","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f69c07204f4220001a8d8ee","uuid":"73524a19-3173-4ea3-9e4b-6b7955a07a7a","title":"n2n搭建一个局域网","slug":"n2nda-jian-yi-ge-ju-yu-wang","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"### 前提条件\\n\\n+ 可访问的公网IP以及`linux`服务器\\n+ 一台或多台客户端，能正常上网即可（游戏好友）\\n\\n### 大致步骤如下\\n\\n+ docker容器安装`supernode`\\n  + 具体命令 `docker run --rm -d -p 5645:5645/udp supermock/supernode`\\n+ 非docker容器安装`supernode`\\n  + `git clone https://github.com/ntop/n2n.git`\\n  + `./autogen.sh`\\n  + `./configure`\\n  + `sudo make install`\\n+ 更多系统安装`n2n`请移步[https://www.sayers.top/delete/n2nvpn.html](https://www.sayers.top/delete/n2nvpn.html)\\n+ 在客户端上安装`n2n client`\\n  + **windows**\\n    + 下载[http://www.vpnhosting.cz/n2nguien.exe](http://www.vpnhosting.cz/n2nguien.exe)\\n    + 配置服务器IP地址以及端口\\n    + 配置局域网IP，用户名和密码。用户名和密码用于组，也就是说其他人使用相同的用户名和密码就可以组建局域网。`advanced`中有对应的版本设置，v1版本是明文传输数据，所以你们在安装服务器`supernode`时自己区分用哪一个版本。\\n    + 确定后会弹出窗口让你重启程序，需要在右下角右键n2n，选择quit。\\n    + 再次打开`n2ngui.exe`时会让你同意是否用于公用网络代表服务已经成功启动。\\n\\n具体配置如图  \\n![1594114053_1_.jpg](https://i.loli.net/2020/07/07/OLBK3q4zyaXDGf9.png)\\n\\n成功后会启动一个虚拟适配器，IP为`n2ngui.exe`设置的IP  \\n![1594114161_1_.jpg](https://i.loli.net/2020/07/07/oyKE3dlXf42s8IC.png)\\n\\n\\n### 部分问题\\n\\n+ ping不通局域网其它机器\\n  + 请检查目标机器的防火墙设置。\\n+ 连接不上服务器\\n  + 请用管理员权限，进入到n2n安装目录，运行`edge -a 192.168.5.2 -c link -k link -l xxx.xxx.xxx.xxx:xxxx`，如果发生错误会发生`Registering with supernode`错误，如果是v2版本则会提示`WARNING:Supernode not responding - moving to 0 of 1`\\n  + 请检查服务器端的防火墙端口是否打开，`UDP`哦！\\n\\n部分参考连接：  \\n\\n+ [https://github.com/ntop/n2n](https://github.com/ntop/n2n)\\n+ [https://hub.docker.com/r/supermock/supernode](https://hub.docker.com/r/supermock/supernode)\\n+ [http://www.lucktu.com/archives/751.html](http://www.lucktu.com/archives/751.html)\\n+ [https://www.sayers.top/delete/n2nvpn.html](https://www.sayers.top/delete/n2nvpn.html)\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"<!--kg-card-begin: markdown--><h3 id=\"\">前提条件</h3>\n<ul>\n<li>可访问的公网IP以及<code>linux</code>服务器</li>\n<li>一台或多台客户端，能正常上网即可（游戏好友）</li>\n</ul>\n<h3 id=\"\">大致步骤如下</h3>\n<ul>\n<li>docker容器安装<code>supernode</code>\n<ul>\n<li>具体命令 <code>docker run --rm -d -p 5645:5645/udp supermock/supernode</code></li>\n</ul>\n</li>\n<li>非docker容器安装<code>supernode</code>\n<ul>\n<li><code>git clone https://github.com/ntop/n2n.git</code></li>\n<li><code>./autogen.sh</code></li>\n<li><code>./configure</code></li>\n<li><code>sudo make install</code></li>\n</ul>\n</li>\n<li>更多系统安装<code>n2n</code>请移步<a href=\"https://www.sayers.top/delete/n2nvpn.html\">https://www.sayers.top/delete/n2nvpn.html</a></li>\n<li>在客户端上安装<code>n2n client</code>\n<ul>\n<li><strong>windows</strong>\n<ul>\n<li>下载<a href=\"http://www.vpnhosting.cz/n2nguien.exe\">http://www.vpnhosting.cz/n2nguien.exe</a></li>\n<li>配置服务器IP地址以及端口</li>\n<li>配置局域网IP，用户名和密码。用户名和密码用于组，也就是说其他人使用相同的用户名和密码就可以组建局域网。<code>advanced</code>中有对应的版本设置，v1版本是明文传输数据，所以你们在安装服务器<code>supernode</code>时自己区分用哪一个版本。</li>\n<li>确定后会弹出窗口让你重启程序，需要在右下角右键n2n，选择quit。</li>\n<li>再次打开<code>n2ngui.exe</code>时会让你同意是否用于公用网络代表服务已经成功启动。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>具体配置如图<br>\n<img src=\"https://i.loli.net/2020/07/07/OLBK3q4zyaXDGf9.png\" alt=\"1594114053_1_.jpg\"></p>\n<p>成功后会启动一个虚拟适配器，IP为<code>n2ngui.exe</code>设置的IP<br>\n<img src=\"https://i.loli.net/2020/07/07/oyKE3dlXf42s8IC.png\" alt=\"1594114161_1_.jpg\"></p>\n<h3 id=\"\">部分问题</h3>\n<ul>\n<li>ping不通局域网其它机器\n<ul>\n<li>请检查目标机器的防火墙设置。</li>\n</ul>\n</li>\n<li>连接不上服务器\n<ul>\n<li>请用管理员权限，进入到n2n安装目录，运行<code>edge -a 192.168.5.2 -c link -k link -l xxx.xxx.xxx.xxx:xxxx</code>，如果发生错误会发生<code>Registering with supernode</code>错误，如果是v2版本则会提示<code>WARNING:Supernode not responding - moving to 0 of 1</code></li>\n<li>请检查服务器端的防火墙端口是否打开，<code>UDP</code>哦！</li>\n</ul>\n</li>\n</ul>\n<p>部分参考连接：</p>\n<ul>\n<li><a href=\"https://github.com/ntop/n2n\">https://github.com/ntop/n2n</a></li>\n<li><a href=\"https://hub.docker.com/r/supermock/supernode\">https://hub.docker.com/r/supermock/supernode</a></li>\n<li><a href=\"http://www.lucktu.com/archives/751.html\">http://www.lucktu.com/archives/751.html</a></li>\n<li><a href=\"https://www.sayers.top/delete/n2nvpn.html\">https://www.sayers.top/delete/n2nvpn.html</a></li>\n</ul>\n<!--kg-card-end: markdown-->","comment_id":"5f69c07204f4220001a8d8ee","plaintext":"前提条件\n * 可访问的公网IP以及linux服务器\n * 一台或多台客户端，能正常上网即可（游戏好友）\n\n大致步骤如下\n * docker容器安装supernode * 具体命令 docker run --rm -d -p 5645:5645/udp supermock/supernode\n   \n   \n * 非docker容器安装supernode * git clone https://github.com/ntop/n2n.git\n    * ./autogen.sh\n    * ./configure\n    * sudo make install\n   \n   \n * 更多系统安装n2n请移步https://www.sayers.top/delete/n2nvpn.html\n * 在客户端上安装n2n client * windows * 下载http://www.vpnhosting.cz/n2nguien.exe\n       * 配置服务器IP地址以及端口\n       * 配置局域网IP，用户名和密码。用户名和密码用于组，也就是说其他人使用相同的用户名和密码就可以组建局域网。advanced\n         中有对应的版本设置，v1版本是明文传输数据，所以你们在安装服务器supernode时自己区分用哪一个版本。\n       * 确定后会弹出窗口让你重启程序，需要在右下角右键n2n，选择quit。\n       * 再次打开n2ngui.exe时会让你同意是否用于公用网络代表服务已经成功启动。\n      \n      \n   \n   \n\n具体配置如图\n\n\n成功后会启动一个虚拟适配器，IP为n2ngui.exe设置的IP\n\n\n部分问题\n * ping不通局域网其它机器 * 请检查目标机器的防火墙设置。\n   \n   \n * 连接不上服务器 * 请用管理员权限，进入到n2n安装目录，运行edge -a 192.168.5.2 -c link -k link -l\n      xxx.xxx.xxx.xxx:xxxx，如果发生错误会发生Registering with supernode错误，如果是v2版本则会提示\n      WARNING:Supernode not responding - moving to 0 of 1\n    * 请检查服务器端的防火墙端口是否打开，UDP哦！\n   \n   \n\n部分参考连接：\n\n * https://github.com/ntop/n2n\n * https://hub.docker.com/r/supermock/supernode\n * http://www.lucktu.com/archives/751.html\n * https://www.sayers.top/delete/n2nvpn.html","feature_image":"/content/images/2020/09/n2n_nat.png","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2020-09-22 09:14:26","updated_at":"2020-09-22 09:21:10","published_at":"2020-07-07 09:14:00","custom_excerpt":"我们可以利用固定的公网IP，在内部搭建一个虚拟的网络服务，用我们的电脑连上去即可组成局域网。","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f69c0b904f4220001a8d8fc","uuid":"f4ca8a25-8ed5-472c-b022-31c066895fda","title":"shell中if的用法","slug":"shellzhong-ifde-yong-fa","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"### 基本用法\\n\\ncreate.sh\\n```sh\\n#!/bin/sh\\n\\npage=$1\\n\\nif [ \\\"$page\\\" != \\\"\\\" ]; then\\n    npx hexo new \\\"$page\\\"\\nelse\\n    echo \\\"please file name\\\"\\nfi\\n```\\n\\n输入`sh create.sh page`后会使用npx临时安装一个hexo.cmd，创建一个`page.md`在`hexo`项目中。[hexo](https://hexo.io/zh-cn/docs/)  \\n如果是输入的`sh create.sh`，没有在后面跟上参数，那么将会输入一个`please file name`。\\n\\n### 高级用法\\n\\n```sh\\n#!/bin/sh\\n\\na=10\\nb=20\\n\\nif [ $a == $b ]\\nthen\\n   echo \\\"a is equal to b\\\"\\nelif [ $a -gt $b ]\\nthen\\n   echo \\\"a is greater than b\\\"\\nelif [ $a -lt $b ]\\nthen\\n   echo \\\"a is less than b\\\"\\nelse\\n   echo \\\"None of the condition met\\\"\\nfi\\n```\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"<!--kg-card-begin: markdown--><h3 id=\"\">基本用法</h3>\n<p>create.sh</p>\n<pre><code class=\"language-sh\">#!/bin/sh\n\npage=$1\n\nif [ &quot;$page&quot; != &quot;&quot; ]; then\n    npx hexo new &quot;$page&quot;\nelse\n    echo &quot;please file name&quot;\nfi\n</code></pre>\n<p>输入<code>sh create.sh page</code>后会使用npx临时安装一个hexo.cmd，创建一个<code>page.md</code>在<code>hexo</code>项目中。<a href=\"https://hexo.io/zh-cn/docs/\">hexo</a><br>\n如果是输入的<code>sh create.sh</code>，没有在后面跟上参数，那么将会输入一个<code>please file name</code>。</p>\n<h3 id=\"\">高级用法</h3>\n<pre><code class=\"language-sh\">#!/bin/sh\n\na=10\nb=20\n\nif [ $a == $b ]\nthen\n   echo &quot;a is equal to b&quot;\nelif [ $a -gt $b ]\nthen\n   echo &quot;a is greater than b&quot;\nelif [ $a -lt $b ]\nthen\n   echo &quot;a is less than b&quot;\nelse\n   echo &quot;None of the condition met&quot;\nfi\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"5f69c0b904f4220001a8d8fc","plaintext":"基本用法\ncreate.sh\n\n#!/bin/sh\n\npage=$1\n\nif [ \"$page\" != \"\" ]; then\n    npx hexo new \"$page\"\nelse\n    echo \"please file name\"\nfi\n\n\n输入sh create.sh page后会使用npx临时安装一个hexo.cmd，创建一个page.md在hexo项目中。hexo\n[https://hexo.io/zh-cn/docs/]\n如果是输入的sh create.sh，没有在后面跟上参数，那么将会输入一个please file name。\n\n高级用法\n#!/bin/sh\n\na=10\nb=20\n\nif [ $a == $b ]\nthen\n   echo \"a is equal to b\"\nelif [ $a -gt $b ]\nthen\n   echo \"a is greater than b\"\nelif [ $a -lt $b ]\nthen\n   echo \"a is less than b\"\nelse\n   echo \"None of the condition met\"\nfi","feature_image":"/content/images/2020/09/jJgjc-2.png","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2020-09-22 09:15:37","updated_at":"2020-09-22 09:17:16","published_at":"2020-07-02 09:16:00","custom_excerpt":"在部署项目时，会遇到一些环境问题，或者在一些重复性的劳动时，可以使用`shell`帮我们完成这些事情。","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f69c13304f4220001a8d90d","uuid":"dbaa74da-0d79-4ae2-8cdc-b0b2d44494de","title":"Vue3与React和Svelte的区别","slug":"vue3yu-reacthe-sveltede-qu-bie","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"markdown\",{\"markdown\":\"**Vue3**目前已经在rc阶段，和之前（vue2）一样，但是在代码组织结构与逻辑复用上有很大的改变。在vue2阶段，实现逻辑服用基本上靠mixin，但是mixin无法预知内部状态，会造成代码混乱，难以维护。\\n\\nVue3为了解决上述难题推出[Composition API](https://v3.vuejs.org/guide/composition-api-introduction.html#why-composition-api)。\\n\\n> Creating Vue components allows us to extract repeatable parts of the interface coupled with its functionality into reusable pieces of code. This alone can get our application pretty far in terms of maintainability and flexibility. However, our collective experience has proved that this alone might not be enough, especially when your application is getting really big – think several hundreds of components. When dealing with such large applications, sharing and reusing code becomes especially important.\\n\\nComposition API是为了构建大型可复用组件，在符合代码书写的前提下完成了逻辑复用。更多关于Composition API请参阅[指南](https://v3.vuejs.org/guide/composition-api-introduction.html)。这里要注意，Composition API中有一个很关键的概念`setup`，所有Composition API都编写在`setup`中，它在声明周期中位于`created`之前，所以在使用生命周期函数时请不要使用`beforeCreate`和`created`，更多请参与[指南](https://v3.vuejs.org/guide/composition-api-lifecycle-hooks.html)。请不要在`setup`中使用`this`，this不是当前实例的引用，而是`undefined`，所以尽量不要和其它`Options API`一起使用。\\n\\n### Vue3中的Composition API和React的Hooks有什么区别呢？\\n\\n**Vue3**中的Composition API在setup中编写，这个函数只会执行一次，而React在某些情况下会调用多次（比如定时请求），具体如下：\\n\\n+ 一般来说更符合惯用的 JavaScript 代码的直觉；\\n+ 不需要顾虑调用顺序，也可以用在条件语句中；\\n+ 不会在每次渲染时重复执行，以降低垃圾回收的压力；\\n+ 不存在内联处理函数导致子组件永远更新的问题，也不需要 useCallback；\\n+ 不存在忘记记录依赖的问题，也不需要“useEffect”和“useMemo”并传入依赖数组以捕获过时的变量。Vue 的自动依赖跟踪可以确保侦听器和计算值总是准确无误。\\n\\n注：上述信息来源于[Vue 组合式 API](https://composition-api.vuejs.org/zh/)\\n\\n### Vue3中的Composition API和Svelte有什么区别呢？\\n\\nSvelte与React、Vue、Ag不同，他利用编译的思想进行代码组织编写。它也没有使用虚拟DOM差异技术，而是通过封装过的代码进行DOM更新，以下是Svelte的输出。\\n\\n> Svelte is a component framework — like React or Vue — but with an important difference. Traditional frameworks allow you to write declarative state-driven code, but there's a penalty: the browser must do extra work to convert those declarative structures into DOM operations, using techniques like  that eat into your frame budget and tax the garbage collector.\\n\\n> Instead, Svelte runs at build time, converting your components into highly efficient imperative code that surgically updates the DOM. As a result, you're able to write ambitious applications with excellent performance characteristics.\\n\\n```html\\n<script>\\n\\tlet name = 'world';\\n</script>\\n\\n<h1>Hello {name}!</h1>\\n```\\n以上代码经过Svelte的编译之后会输出如下代码：\\n```javascript\\n/* App.svelte generated by Svelte v3.25.1 */\\nimport {\\n\\tSvelteComponent,\\n\\tdetach,\\n\\telement,\\n\\tinit,\\n\\tinsert,\\n\\tnoop,\\n\\tsafe_not_equal\\n} from \\\"svelte/internal\\\";\\n\\nfunction create_fragment(ctx) {\\n\\tlet h1;\\n\\n\\treturn {\\n\\t\\tc() {\\n\\t\\t\\th1 = element(\\\"h1\\\");\\n\\t\\t\\th1.textContent = `Hello ${name}!`;\\n\\t\\t},\\n\\t\\tm(target, anchor) {\\n\\t\\t\\tinsert(target, h1, anchor);\\n\\t\\t},\\n\\t\\tp: noop,\\n\\t\\ti: noop,\\n\\t\\to: noop,\\n\\t\\td(detaching) {\\n\\t\\t\\tif (detaching) detach(h1);\\n\\t\\t}\\n\\t};\\n}\\n\\nlet name = \\\"world\\\";\\n\\nclass App extends SvelteComponent {\\n\\tconstructor(options) {\\n\\t\\tsuper();\\n\\t\\tinit(this, options, null, create_fragment, safe_not_equal, {});\\n\\t}\\n}\\n\\nexport default App;\\n```\\n\\n在**Vue3**中，不需要借助编译器（webpack、rollup）的帮助，可以直接运行在浏览器侧或服务器（ssr）侧。\\n\\n```html\\n<!DOCTYPE html>\\n<html lang=\\\"zh-cn\\\">\\n  <head>\\n  </head>\\n  <body>\\n    <div id=\\\"root\\\"></div>\\n  </body>\\n  <script type=\\\"module\\\">\\n    import { createApp } from 'https://unpkg.com/vue@3.0.0-rc.10/dist/vue.esm-browser.js'\\n\\n    const App = createApp({\\n      template: `<button>change A value</button>`,\\n    })\\n\\n    App.mount('#root')\\n  </script>\\n</html>\\n```\\n\\n从以上代码可以看出来，它们分别有自己的优劣势：\\n\\n+ Svelte 的代码看起来更简洁，但是已经不属于标准 JavaScript。\\n+ Svelte 编译更快，但是不适合构建大型应用，因为它的社区目前来说没有Vue、React庞大。\\n+ Svelte 响应只有顶层变量，函数内部声明的变量并不具有响应性。\\n+ Svelte 很难集成TypeScript，难以利用社区优势构建应用。\\n\\n### 最终结论\\n\\nVue3的Composition API是Vue发展过程的产物，是为了解决构建大型应用逻辑代码复用问题。相比Vue2配置型API，我更倾向于Vue3的Composition API。\\n\\nSvelte的思想是非常先进的，基于编译优化的思想在没有diff情况下性能并没有很大的区别。\\n\\n参考链接：\\n\\n+ [https://svelte.dev/](https://svelte.dev/)\\n+ [https://v3.vuejs.org/](https://v3.vuejs.org/)\\n+ [https://composition-api.vuejs.org/](https://composition-api.vuejs.org/)\\n\"}]],\"markups\":[],\"sections\":[[10,0],[1,\"p\",[]]]}","html":"<!--kg-card-begin: markdown--><p><strong>Vue3</strong>目前已经在rc阶段，和之前（vue2）一样，但是在代码组织结构与逻辑复用上有很大的改变。在vue2阶段，实现逻辑服用基本上靠mixin，但是mixin无法预知内部状态，会造成代码混乱，难以维护。</p>\n<p>Vue3为了解决上述难题推出<a href=\"https://v3.vuejs.org/guide/composition-api-introduction.html#why-composition-api\">Composition API</a>。</p>\n<blockquote>\n<p>Creating Vue components allows us to extract repeatable parts of the interface coupled with its functionality into reusable pieces of code. This alone can get our application pretty far in terms of maintainability and flexibility. However, our collective experience has proved that this alone might not be enough, especially when your application is getting really big – think several hundreds of components. When dealing with such large applications, sharing and reusing code becomes especially important.</p>\n</blockquote>\n<p>Composition API是为了构建大型可复用组件，在符合代码书写的前提下完成了逻辑复用。更多关于Composition API请参阅<a href=\"https://v3.vuejs.org/guide/composition-api-introduction.html\">指南</a>。这里要注意，Composition API中有一个很关键的概念<code>setup</code>，所有Composition API都编写在<code>setup</code>中，它在声明周期中位于<code>created</code>之前，所以在使用生命周期函数时请不要使用<code>beforeCreate</code>和<code>created</code>，更多请参与<a href=\"https://v3.vuejs.org/guide/composition-api-lifecycle-hooks.html\">指南</a>。请不要在<code>setup</code>中使用<code>this</code>，this不是当前实例的引用，而是<code>undefined</code>，所以尽量不要和其它<code>Options API</code>一起使用。</p>\n<h3 id=\"vue3compositionapireacthooks\">Vue3中的Composition API和React的Hooks有什么区别呢？</h3>\n<p><strong>Vue3</strong>中的Composition API在setup中编写，这个函数只会执行一次，而React在某些情况下会调用多次（比如定时请求），具体如下：</p>\n<ul>\n<li>一般来说更符合惯用的 JavaScript 代码的直觉；</li>\n<li>不需要顾虑调用顺序，也可以用在条件语句中；</li>\n<li>不会在每次渲染时重复执行，以降低垃圾回收的压力；</li>\n<li>不存在内联处理函数导致子组件永远更新的问题，也不需要 useCallback；</li>\n<li>不存在忘记记录依赖的问题，也不需要“useEffect”和“useMemo”并传入依赖数组以捕获过时的变量。Vue 的自动依赖跟踪可以确保侦听器和计算值总是准确无误。</li>\n</ul>\n<p>注：上述信息来源于<a href=\"https://composition-api.vuejs.org/zh/\">Vue 组合式 API</a></p>\n<h3 id=\"vue3compositionapisvelte\">Vue3中的Composition API和Svelte有什么区别呢？</h3>\n<p>Svelte与React、Vue、Ag不同，他利用编译的思想进行代码组织编写。它也没有使用虚拟DOM差异技术，而是通过封装过的代码进行DOM更新，以下是Svelte的输出。</p>\n<blockquote>\n<p>Svelte is a component framework — like React or Vue — but with an important difference. Traditional frameworks allow you to write declarative state-driven code, but there's a penalty: the browser must do extra work to convert those declarative structures into DOM operations, using techniques like  that eat into your frame budget and tax the garbage collector.</p>\n</blockquote>\n<blockquote>\n<p>Instead, Svelte runs at build time, converting your components into highly efficient imperative code that surgically updates the DOM. As a result, you're able to write ambitious applications with excellent performance characteristics.</p>\n</blockquote>\n<pre><code class=\"language-html\">&lt;script&gt;\n\tlet name = 'world';\n&lt;/script&gt;\n\n&lt;h1&gt;Hello {name}!&lt;/h1&gt;\n</code></pre>\n<p>以上代码经过Svelte的编译之后会输出如下代码：</p>\n<pre><code class=\"language-javascript\">/* App.svelte generated by Svelte v3.25.1 */\nimport {\n\tSvelteComponent,\n\tdetach,\n\telement,\n\tinit,\n\tinsert,\n\tnoop,\n\tsafe_not_equal\n} from &quot;svelte/internal&quot;;\n\nfunction create_fragment(ctx) {\n\tlet h1;\n\n\treturn {\n\t\tc() {\n\t\t\th1 = element(&quot;h1&quot;);\n\t\t\th1.textContent = `Hello ${name}!`;\n\t\t},\n\t\tm(target, anchor) {\n\t\t\tinsert(target, h1, anchor);\n\t\t},\n\t\tp: noop,\n\t\ti: noop,\n\t\to: noop,\n\t\td(detaching) {\n\t\t\tif (detaching) detach(h1);\n\t\t}\n\t};\n}\n\nlet name = &quot;world&quot;;\n\nclass App extends SvelteComponent {\n\tconstructor(options) {\n\t\tsuper();\n\t\tinit(this, options, null, create_fragment, safe_not_equal, {});\n\t}\n}\n\nexport default App;\n</code></pre>\n<p>在<strong>Vue3</strong>中，不需要借助编译器（webpack、rollup）的帮助，可以直接运行在浏览器侧或服务器（ssr）侧。</p>\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;zh-cn&quot;&gt;\n  &lt;head&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;\n  &lt;/body&gt;\n  &lt;script type=&quot;module&quot;&gt;\n    import { createApp } from 'https://unpkg.com/vue@3.0.0-rc.10/dist/vue.esm-browser.js'\n\n    const App = createApp({\n      template: `&lt;button&gt;change A value&lt;/button&gt;`,\n    })\n\n    App.mount('#root')\n  &lt;/script&gt;\n&lt;/html&gt;\n</code></pre>\n<p>从以上代码可以看出来，它们分别有自己的优劣势：</p>\n<ul>\n<li>Svelte 的代码看起来更简洁，但是已经不属于标准 JavaScript。</li>\n<li>Svelte 编译更快，但是不适合构建大型应用，因为它的社区目前来说没有Vue、React庞大。</li>\n<li>Svelte 响应只有顶层变量，函数内部声明的变量并不具有响应性。</li>\n<li>Svelte 很难集成TypeScript，难以利用社区优势构建应用。</li>\n</ul>\n<h3 id=\"\">最终结论</h3>\n<p>Vue3的Composition API是Vue发展过程的产物，是为了解决构建大型应用逻辑代码复用问题。相比Vue2配置型API，我更倾向于Vue3的Composition API。</p>\n<p>Svelte的思想是非常先进的，基于编译优化的思想在没有diff情况下性能并没有很大的区别。</p>\n<p>参考链接：</p>\n<ul>\n<li><a href=\"https://svelte.dev/\">https://svelte.dev/</a></li>\n<li><a href=\"https://v3.vuejs.org/\">https://v3.vuejs.org/</a></li>\n<li><a href=\"https://composition-api.vuejs.org/\">https://composition-api.vuejs.org/</a></li>\n</ul>\n<!--kg-card-end: markdown-->","comment_id":"5f69c13304f4220001a8d90d","plaintext":"Vue3\n目前已经在rc阶段，和之前（vue2）一样，但是在代码组织结构与逻辑复用上有很大的改变。在vue2阶段，实现逻辑服用基本上靠mixin，但是mixin无法预知内部状态，会造成代码混乱，难以维护。\n\nVue3为了解决上述难题推出Composition API\n[https://v3.vuejs.org/guide/composition-api-introduction.html#why-composition-api]\n。\n\n> Creating Vue components allows us to extract repeatable parts of the interface\ncoupled with its functionality into reusable pieces of code. This alone can get\nour application pretty far in terms of maintainability and flexibility. However,\nour collective experience has proved that this alone might not be enough,\nespecially when your application is getting really big – think several hundreds\nof components. When dealing with such large applications, sharing and reusing\ncode becomes especially important.\n\n\nComposition API是为了构建大型可复用组件，在符合代码书写的前提下完成了逻辑复用。更多关于Composition API请参阅指南\n[https://v3.vuejs.org/guide/composition-api-introduction.html]。这里要注意，Composition\nAPI中有一个很关键的概念setup，所有Composition API都编写在setup中，它在声明周期中位于created\n之前，所以在使用生命周期函数时请不要使用beforeCreate和created，更多请参与指南\n[https://v3.vuejs.org/guide/composition-api-lifecycle-hooks.html]。请不要在setup中使用\nthis，this不是当前实例的引用，而是undefined，所以尽量不要和其它Options API一起使用。\n\nVue3中的Composition API和React的Hooks有什么区别呢？\nVue3中的Composition API在setup中编写，这个函数只会执行一次，而React在某些情况下会调用多次（比如定时请求），具体如下：\n\n * 一般来说更符合惯用的 JavaScript 代码的直觉；\n * 不需要顾虑调用顺序，也可以用在条件语句中；\n * 不会在每次渲染时重复执行，以降低垃圾回收的压力；\n * 不存在内联处理函数导致子组件永远更新的问题，也不需要 useCallback；\n * 不存在忘记记录依赖的问题，也不需要“useEffect”和“useMemo”并传入依赖数组以捕获过时的变量。Vue\n   的自动依赖跟踪可以确保侦听器和计算值总是准确无误。\n\n注：上述信息来源于Vue 组合式 API [https://composition-api.vuejs.org/zh/]\n\nVue3中的Composition API和Svelte有什么区别呢？\nSvelte与React、Vue、Ag不同，他利用编译的思想进行代码组织编写。它也没有使用虚拟DOM差异技术，而是通过封装过的代码进行DOM更新，以下是Svelte的输出。\n\n> Svelte is a component framework — like React or Vue — but with an important\ndifference. Traditional frameworks allow you to write declarative state-driven\ncode, but there's a penalty: the browser must do extra work to convert those\ndeclarative structures into DOM operations, using techniques like that eat into\nyour frame budget and tax the garbage collector.\n\n\n> Instead, Svelte runs at build time, converting your components into highly\nefficient imperative code that surgically updates the DOM. As a result, you're\nable to write ambitious applications with excellent performance characteristics.\n\n\n<script>\n\tlet name = 'world';\n</script>\n\n<h1>Hello {name}!</h1>\n\n\n以上代码经过Svelte的编译之后会输出如下代码：\n\n/* App.svelte generated by Svelte v3.25.1 */\nimport {\n\tSvelteComponent,\n\tdetach,\n\telement,\n\tinit,\n\tinsert,\n\tnoop,\n\tsafe_not_equal\n} from \"svelte/internal\";\n\nfunction create_fragment(ctx) {\n\tlet h1;\n\n\treturn {\n\t\tc() {\n\t\t\th1 = element(\"h1\");\n\t\t\th1.textContent = `Hello ${name}!`;\n\t\t},\n\t\tm(target, anchor) {\n\t\t\tinsert(target, h1, anchor);\n\t\t},\n\t\tp: noop,\n\t\ti: noop,\n\t\to: noop,\n\t\td(detaching) {\n\t\t\tif (detaching) detach(h1);\n\t\t}\n\t};\n}\n\nlet name = \"world\";\n\nclass App extends SvelteComponent {\n\tconstructor(options) {\n\t\tsuper();\n\t\tinit(this, options, null, create_fragment, safe_not_equal, {});\n\t}\n}\n\nexport default App;\n\n\n在Vue3中，不需要借助编译器（webpack、rollup）的帮助，可以直接运行在浏览器侧或服务器（ssr）侧。\n\n<!DOCTYPE html>\n<html lang=\"zh-cn\">\n  <head>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n  <script type=\"module\">\n    import { createApp } from 'https://unpkg.com/vue@3.0.0-rc.10/dist/vue.esm-browser.js'\n\n    const App = createApp({\n      template: `<button>change A value</button>`,\n    })\n\n    App.mount('#root')\n  </script>\n</html>\n\n\n从以上代码可以看出来，它们分别有自己的优劣势：\n\n * Svelte 的代码看起来更简洁，但是已经不属于标准 JavaScript。\n * Svelte 编译更快，但是不适合构建大型应用，因为它的社区目前来说没有Vue、React庞大。\n * Svelte 响应只有顶层变量，函数内部声明的变量并不具有响应性。\n * Svelte 很难集成TypeScript，难以利用社区优势构建应用。\n\n最终结论\nVue3的Composition\nAPI是Vue发展过程的产物，是为了解决构建大型应用逻辑代码复用问题。相比Vue2配置型API，我更倾向于Vue3的Composition API。\n\nSvelte的思想是非常先进的，基于编译优化的思想在没有diff情况下性能并没有很大的区别。\n\n参考链接：\n\n * https://svelte.dev/\n * https://v3.vuejs.org/\n * https://composition-api.vuejs.org/","feature_image":"/content/images/2020/09/1_v6AP1Fqa_ecaKtQIAFv9fA.png","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2020-09-22 09:17:39","updated_at":"2020-09-22 09:19:21","published_at":"2020-09-16 09:17:00","custom_excerpt":"vue和react是前端开发中最流行的两种框架，它们在运行时进行工作，svelte利用编译优化思想，在编译过程中将顶层变量变更为响应式。","codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null}],"posts_meta":[{"id":"5f681e8504f4220001a8d8a8","post_id":"5f681e8504f4220001a8d8a2","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":"是Promise的一个非常稳定标准，用于给实现该标准的一个说明。他规范了then方法的行为，使得同一份代码在不同平台也能拥有相同效果。","email_subject":null},{"id":"5f681e8504f4220001a8d8ab","post_id":"5f681e8504f4220001a8d8a3","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":"最近在升级v-easy-components到2.0.0版本时候，发现了一些升级过程中的问题，总结一下，希望能帮到从vue2升级到vue3的项目。","email_subject":null},{"id":"5f69bea204f4220001a8d8c1","post_id":"5f69be3104f4220001a8d8b5","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":"sentry是什么呢？我在Github上找到了这个答案。  \nReal-time crash reporting for your web apps, mobile apps, and games.","email_subject":null},{"id":"5f69bf2a04f4220001a8d8d1","post_id":"5f69bedb04f4220001a8d8c4","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":"sentry支持多个平台，在新建项目的时候可以发现支持数十种平台。","email_subject":null},{"id":"5f69c05104f4220001a8d8ea","post_id":"5f69bff204f4220001a8d8e1","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":"在 docker 中我们可以借助`network`这个子级命令，它提供容器之间的通信，分为以下 5 种驱动模式。","email_subject":null},{"id":"5f69c10c04f4220001a8d908","post_id":"5f69c0b904f4220001a8d8fc","og_image":"/content/images/2020/09/jJgjc-1.png","og_title":null,"og_description":null,"twitter_image":"/content/images/2020/09/jJgjc.png","twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"email_subject":null},{"id":"5f69c18b04f4220001a8d91d","post_id":"5f69c13304f4220001a8d90d","og_image":null,"og_title":null,"og_description":null,"twitter_image":"/content/images/2020/09/1_v6AP1Fqa_ecaKtQIAFv9fA-1.png","twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":"vue和react是前端开发中最流行的两种框架，它们在运行时进行工作，svelte利用编译优化思想，在编译过程中将顶层变量变更为响应式。","email_subject":null}],"users":[{"id":"1","name":"Link","slug":"link","password":"$2a$10$.lOUka2LJqtwzvp0IRCbh.ArAUVy9jO0.ebVuUwBmjSnSsZlmzXja","email":"link19970507@gmail.com","profile_image":null,"cover_image":null,"bio":null,"website":null,"location":null,"facebook":null,"twitter":null,"accessibility":null,"status":"active","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"tour":"[\"getting-started\"]","last_seen":"2020-09-22 09:02:26","created_at":"2020-09-21 02:46:33","updated_at":"2020-09-22 09:23:12"}],"posts_authors":[{"id":"5f681e8504f4220001a8d8a6","post_id":"5f681e8504f4220001a8d8a2","author_id":"1","sort_order":0},{"id":"5f681e8504f4220001a8d8aa","post_id":"5f681e8504f4220001a8d8a3","author_id":"1","sort_order":0},{"id":"5f69be3104f4220001a8d8b6","post_id":"5f69be3104f4220001a8d8b5","author_id":"1","sort_order":0},{"id":"5f69bedb04f4220001a8d8c5","post_id":"5f69bedb04f4220001a8d8c4","author_id":"1","sort_order":0},{"id":"5f69bf4204f4220001a8d8d5","post_id":"5f69bf4204f4220001a8d8d4","author_id":"1","sort_order":0},{"id":"5f69bff204f4220001a8d8e2","post_id":"5f69bff204f4220001a8d8e1","author_id":"1","sort_order":0},{"id":"5f69c07204f4220001a8d8ef","post_id":"5f69c07204f4220001a8d8ee","author_id":"1","sort_order":0},{"id":"5f69c0b904f4220001a8d8fd","post_id":"5f69c0b904f4220001a8d8fc","author_id":"1","sort_order":0},{"id":"5f69c13304f4220001a8d90e","post_id":"5f69c13304f4220001a8d90d","author_id":"1","sort_order":0}],"roles":[{"id":"5f68140875490f0001ee866f","name":"Administrator","description":"Administrators","created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee8670","name":"Editor","description":"Editors","created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee8671","name":"Author","description":"Authors","created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee8672","name":"Contributor","description":"Contributors","created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee8673","name":"Owner","description":"Blog Owner","created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee8674","name":"Admin Integration","description":"External Apps","created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee8675","name":"DB Backup Integration","description":"Internal DB Backup Client","created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee8676","name":"Scheduler Integration","description":"Internal Scheduler Client","created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"}],"roles_users":[{"id":"5f68140a75490f0001ee87a6","role_id":"5f68140875490f0001ee8673","user_id":"1"}],"permissions":[{"id":"5f68140875490f0001ee8677","name":"Export database","object_type":"db","action_type":"exportContent","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee8678","name":"Import database","object_type":"db","action_type":"importContent","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee8679","name":"Delete all content","object_type":"db","action_type":"deleteAllContent","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee867a","name":"Send mail","object_type":"mail","action_type":"send","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee867b","name":"Browse notifications","object_type":"notification","action_type":"browse","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee867c","name":"Add notifications","object_type":"notification","action_type":"add","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee867d","name":"Delete notifications","object_type":"notification","action_type":"destroy","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee867e","name":"Browse posts","object_type":"post","action_type":"browse","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee867f","name":"Read posts","object_type":"post","action_type":"read","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee8680","name":"Edit posts","object_type":"post","action_type":"edit","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee8681","name":"Add posts","object_type":"post","action_type":"add","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee8682","name":"Delete posts","object_type":"post","action_type":"destroy","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee8683","name":"Browse settings","object_type":"setting","action_type":"browse","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee8684","name":"Read settings","object_type":"setting","action_type":"read","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee8685","name":"Edit settings","object_type":"setting","action_type":"edit","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee8686","name":"Generate slugs","object_type":"slug","action_type":"generate","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee8687","name":"Browse tags","object_type":"tag","action_type":"browse","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee8688","name":"Read tags","object_type":"tag","action_type":"read","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee8689","name":"Edit tags","object_type":"tag","action_type":"edit","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee868a","name":"Add tags","object_type":"tag","action_type":"add","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee868b","name":"Delete tags","object_type":"tag","action_type":"destroy","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee868c","name":"Browse themes","object_type":"theme","action_type":"browse","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee868d","name":"Edit themes","object_type":"theme","action_type":"edit","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee868e","name":"Activate themes","object_type":"theme","action_type":"activate","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee868f","name":"Upload themes","object_type":"theme","action_type":"add","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee8690","name":"Download themes","object_type":"theme","action_type":"read","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee8691","name":"Delete themes","object_type":"theme","action_type":"destroy","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee8692","name":"Browse users","object_type":"user","action_type":"browse","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee8693","name":"Read users","object_type":"user","action_type":"read","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee8694","name":"Edit users","object_type":"user","action_type":"edit","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee8695","name":"Add users","object_type":"user","action_type":"add","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee8696","name":"Delete users","object_type":"user","action_type":"destroy","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee8697","name":"Assign a role","object_type":"role","action_type":"assign","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee8698","name":"Browse roles","object_type":"role","action_type":"browse","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee8699","name":"Browse invites","object_type":"invite","action_type":"browse","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee869a","name":"Read invites","object_type":"invite","action_type":"read","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee869b","name":"Edit invites","object_type":"invite","action_type":"edit","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee869c","name":"Add invites","object_type":"invite","action_type":"add","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee869d","name":"Delete invites","object_type":"invite","action_type":"destroy","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee869e","name":"Download redirects","object_type":"redirect","action_type":"download","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee869f","name":"Upload redirects","object_type":"redirect","action_type":"upload","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee86a0","name":"Add webhooks","object_type":"webhook","action_type":"add","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee86a1","name":"Edit webhooks","object_type":"webhook","action_type":"edit","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee86a2","name":"Delete webhooks","object_type":"webhook","action_type":"destroy","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee86a3","name":"Browse integrations","object_type":"integration","action_type":"browse","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee86a4","name":"Read integrations","object_type":"integration","action_type":"read","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee86a5","name":"Edit integrations","object_type":"integration","action_type":"edit","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee86a6","name":"Add integrations","object_type":"integration","action_type":"add","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee86a7","name":"Delete integrations","object_type":"integration","action_type":"destroy","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee86a8","name":"Browse API keys","object_type":"api_key","action_type":"browse","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee86a9","name":"Read API keys","object_type":"api_key","action_type":"read","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee86aa","name":"Edit API keys","object_type":"api_key","action_type":"edit","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee86ab","name":"Add API keys","object_type":"api_key","action_type":"add","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee86ac","name":"Delete API keys","object_type":"api_key","action_type":"destroy","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee86ad","name":"Browse Actions","object_type":"action","action_type":"browse","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee86ae","name":"Browse Members","object_type":"member","action_type":"browse","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee86af","name":"Read Members","object_type":"member","action_type":"read","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee86b0","name":"Edit Members","object_type":"member","action_type":"edit","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee86b1","name":"Add Members","object_type":"member","action_type":"add","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee86b2","name":"Delete Members","object_type":"member","action_type":"destroy","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee86b3","name":"Publish posts","object_type":"post","action_type":"publish","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee86b4","name":"Backup database","object_type":"db","action_type":"backupContent","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee86b5","name":"Email preview","object_type":"email_preview","action_type":"read","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee86b6","name":"Send test email","object_type":"email_preview","action_type":"sendTestEmail","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee86b7","name":"Browse emails","object_type":"email","action_type":"browse","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee86b8","name":"Read emails","object_type":"email","action_type":"read","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee86b9","name":"Retry emails","object_type":"email","action_type":"retry","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee86ba","name":"Browse labels","object_type":"label","action_type":"browse","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee86bb","name":"Read labels","object_type":"label","action_type":"read","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140875490f0001ee86bc","name":"Edit labels","object_type":"label","action_type":"edit","object_id":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f68140975490f0001ee86bd","name":"Add labels","object_type":"label","action_type":"add","object_id":null,"created_at":"2020-09-21 02:46:33","updated_at":"2020-09-21 02:46:33"},{"id":"5f68140975490f0001ee86be","name":"Delete labels","object_type":"label","action_type":"destroy","object_id":null,"created_at":"2020-09-21 02:46:33","updated_at":"2020-09-21 02:46:33"},{"id":"5f68140975490f0001ee86bf","name":"Read member signin urls","object_type":"member_signin_url","action_type":"read","object_id":null,"created_at":"2020-09-21 02:46:33","updated_at":"2020-09-21 02:46:33"},{"id":"5f68140975490f0001ee86c0","name":"Read identities","object_type":"identity","action_type":"read","object_id":null,"created_at":"2020-09-21 02:46:33","updated_at":"2020-09-21 02:46:33"},{"id":"5f68140975490f0001ee86c1","name":"Auth Stripe Connect for Members","object_type":"members_stripe_connect","action_type":"auth","object_id":null,"created_at":"2020-09-21 02:46:33","updated_at":"2020-09-21 02:46:33"}],"permissions_users":[],"permissions_roles":[{"id":"5f68140a75490f0001ee86d7","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee8677"},{"id":"5f68140a75490f0001ee86d8","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee8678"},{"id":"5f68140a75490f0001ee86d9","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee8679"},{"id":"5f68140a75490f0001ee86da","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee86b4"},{"id":"5f68140a75490f0001ee86db","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee867a"},{"id":"5f68140a75490f0001ee86dc","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee867b"},{"id":"5f68140a75490f0001ee86dd","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee867c"},{"id":"5f68140a75490f0001ee86de","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee867d"},{"id":"5f68140a75490f0001ee86df","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee867e"},{"id":"5f68140a75490f0001ee86e0","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee867f"},{"id":"5f68140a75490f0001ee86e1","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee8680"},{"id":"5f68140a75490f0001ee86e2","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee8681"},{"id":"5f68140a75490f0001ee86e3","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee8682"},{"id":"5f68140a75490f0001ee86e4","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee86b3"},{"id":"5f68140a75490f0001ee86e5","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee8683"},{"id":"5f68140a75490f0001ee86e6","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee8684"},{"id":"5f68140a75490f0001ee86e7","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee8685"},{"id":"5f68140a75490f0001ee86e8","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee8686"},{"id":"5f68140a75490f0001ee86e9","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee8687"},{"id":"5f68140a75490f0001ee86ea","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee8688"},{"id":"5f68140a75490f0001ee86eb","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee8689"},{"id":"5f68140a75490f0001ee86ec","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee868a"},{"id":"5f68140a75490f0001ee86ed","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee868b"},{"id":"5f68140a75490f0001ee86ee","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee868c"},{"id":"5f68140a75490f0001ee86ef","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee868d"},{"id":"5f68140a75490f0001ee86f0","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee868e"},{"id":"5f68140a75490f0001ee86f1","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee868f"},{"id":"5f68140a75490f0001ee86f2","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee8690"},{"id":"5f68140a75490f0001ee86f3","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee8691"},{"id":"5f68140a75490f0001ee86f4","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee8692"},{"id":"5f68140a75490f0001ee86f5","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee8693"},{"id":"5f68140a75490f0001ee86f6","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee8694"},{"id":"5f68140a75490f0001ee86f7","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee8695"},{"id":"5f68140a75490f0001ee86f8","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee8696"},{"id":"5f68140a75490f0001ee86f9","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee8697"},{"id":"5f68140a75490f0001ee86fa","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee8698"},{"id":"5f68140a75490f0001ee86fb","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee8699"},{"id":"5f68140a75490f0001ee86fc","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee869a"},{"id":"5f68140a75490f0001ee86fd","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee869b"},{"id":"5f68140a75490f0001ee86fe","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee869c"},{"id":"5f68140a75490f0001ee86ff","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee869d"},{"id":"5f68140a75490f0001ee8700","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee869e"},{"id":"5f68140a75490f0001ee8701","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee869f"},{"id":"5f68140a75490f0001ee8702","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee86a0"},{"id":"5f68140a75490f0001ee8703","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee86a1"},{"id":"5f68140a75490f0001ee8704","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee86a2"},{"id":"5f68140a75490f0001ee8705","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee86a3"},{"id":"5f68140a75490f0001ee8706","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee86a4"},{"id":"5f68140a75490f0001ee8707","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee86a5"},{"id":"5f68140a75490f0001ee8708","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee86a6"},{"id":"5f68140a75490f0001ee8709","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee86a7"},{"id":"5f68140a75490f0001ee870a","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee86a8"},{"id":"5f68140a75490f0001ee870b","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee86a9"},{"id":"5f68140a75490f0001ee870c","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee86aa"},{"id":"5f68140a75490f0001ee870d","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee86ab"},{"id":"5f68140a75490f0001ee870e","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee86ac"},{"id":"5f68140a75490f0001ee870f","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee86ad"},{"id":"5f68140a75490f0001ee8710","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee86ae"},{"id":"5f68140a75490f0001ee8711","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee86af"},{"id":"5f68140a75490f0001ee8712","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee86b0"},{"id":"5f68140a75490f0001ee8713","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee86b1"},{"id":"5f68140a75490f0001ee8714","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee86b2"},{"id":"5f68140a75490f0001ee8715","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee86ba"},{"id":"5f68140a75490f0001ee8716","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee86bb"},{"id":"5f68140a75490f0001ee8717","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee86bc"},{"id":"5f68140a75490f0001ee8718","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140975490f0001ee86bd"},{"id":"5f68140a75490f0001ee8719","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140975490f0001ee86be"},{"id":"5f68140a75490f0001ee871a","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee86b5"},{"id":"5f68140a75490f0001ee871b","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee86b6"},{"id":"5f68140a75490f0001ee871c","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee86b7"},{"id":"5f68140a75490f0001ee871d","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee86b8"},{"id":"5f68140a75490f0001ee871e","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140875490f0001ee86b9"},{"id":"5f68140a75490f0001ee871f","role_id":"5f68140875490f0001ee866f","permission_id":"5f68140975490f0001ee86bf"},{"id":"5f68140a75490f0001ee8720","role_id":"5f68140875490f0001ee8675","permission_id":"5f68140875490f0001ee8677"},{"id":"5f68140a75490f0001ee8721","role_id":"5f68140875490f0001ee8675","permission_id":"5f68140875490f0001ee8678"},{"id":"5f68140a75490f0001ee8722","role_id":"5f68140875490f0001ee8675","permission_id":"5f68140875490f0001ee8679"},{"id":"5f68140a75490f0001ee8723","role_id":"5f68140875490f0001ee8675","permission_id":"5f68140875490f0001ee86b4"},{"id":"5f68140a75490f0001ee8724","role_id":"5f68140875490f0001ee8676","permission_id":"5f68140875490f0001ee86b3"},{"id":"5f68140a75490f0001ee8725","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee867a"},{"id":"5f68140a75490f0001ee8726","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee867b"},{"id":"5f68140a75490f0001ee8727","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee867c"},{"id":"5f68140a75490f0001ee8728","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee867d"},{"id":"5f68140a75490f0001ee8729","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee867e"},{"id":"5f68140a75490f0001ee872a","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee867f"},{"id":"5f68140a75490f0001ee872b","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee8680"},{"id":"5f68140a75490f0001ee872c","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee8681"},{"id":"5f68140a75490f0001ee872d","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee8682"},{"id":"5f68140a75490f0001ee872e","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee86b3"},{"id":"5f68140a75490f0001ee872f","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee8683"},{"id":"5f68140a75490f0001ee8730","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee8684"},{"id":"5f68140a75490f0001ee8731","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee8685"},{"id":"5f68140a75490f0001ee8732","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee8686"},{"id":"5f68140a75490f0001ee8733","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee8687"},{"id":"5f68140a75490f0001ee8734","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee8688"},{"id":"5f68140a75490f0001ee8735","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee8689"},{"id":"5f68140a75490f0001ee8736","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee868a"},{"id":"5f68140a75490f0001ee8737","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee868b"},{"id":"5f68140a75490f0001ee8738","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee868c"},{"id":"5f68140a75490f0001ee8739","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee868d"},{"id":"5f68140a75490f0001ee873a","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee868e"},{"id":"5f68140a75490f0001ee873b","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee868f"},{"id":"5f68140a75490f0001ee873c","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee8690"},{"id":"5f68140a75490f0001ee873d","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee8691"},{"id":"5f68140a75490f0001ee873e","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee8692"},{"id":"5f68140a75490f0001ee873f","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee8693"},{"id":"5f68140a75490f0001ee8740","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee8694"},{"id":"5f68140a75490f0001ee8741","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee8695"},{"id":"5f68140a75490f0001ee8742","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee8696"},{"id":"5f68140a75490f0001ee8743","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee8697"},{"id":"5f68140a75490f0001ee8744","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee8698"},{"id":"5f68140a75490f0001ee8745","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee8699"},{"id":"5f68140a75490f0001ee8746","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee869a"},{"id":"5f68140a75490f0001ee8747","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee869b"},{"id":"5f68140a75490f0001ee8748","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee869c"},{"id":"5f68140a75490f0001ee8749","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee869d"},{"id":"5f68140a75490f0001ee874a","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee869e"},{"id":"5f68140a75490f0001ee874b","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee869f"},{"id":"5f68140a75490f0001ee874c","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee86a0"},{"id":"5f68140a75490f0001ee874d","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee86a1"},{"id":"5f68140a75490f0001ee874e","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee86a2"},{"id":"5f68140a75490f0001ee874f","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee86ad"},{"id":"5f68140a75490f0001ee8750","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee86ae"},{"id":"5f68140a75490f0001ee8751","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee86af"},{"id":"5f68140a75490f0001ee8752","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee86b0"},{"id":"5f68140a75490f0001ee8753","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee86b1"},{"id":"5f68140a75490f0001ee8754","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee86b2"},{"id":"5f68140a75490f0001ee8755","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee86ba"},{"id":"5f68140a75490f0001ee8756","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee86bb"},{"id":"5f68140a75490f0001ee8757","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee86bc"},{"id":"5f68140a75490f0001ee8758","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140975490f0001ee86bd"},{"id":"5f68140a75490f0001ee8759","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140975490f0001ee86be"},{"id":"5f68140a75490f0001ee875a","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee86b5"},{"id":"5f68140a75490f0001ee875b","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee86b6"},{"id":"5f68140a75490f0001ee875c","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee86b7"},{"id":"5f68140a75490f0001ee875d","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee86b8"},{"id":"5f68140a75490f0001ee875e","role_id":"5f68140875490f0001ee8674","permission_id":"5f68140875490f0001ee86b9"},{"id":"5f68140a75490f0001ee875f","role_id":"5f68140875490f0001ee8670","permission_id":"5f68140875490f0001ee867b"},{"id":"5f68140a75490f0001ee8760","role_id":"5f68140875490f0001ee8670","permission_id":"5f68140875490f0001ee867c"},{"id":"5f68140a75490f0001ee8761","role_id":"5f68140875490f0001ee8670","permission_id":"5f68140875490f0001ee867d"},{"id":"5f68140a75490f0001ee8762","role_id":"5f68140875490f0001ee8670","permission_id":"5f68140875490f0001ee867e"},{"id":"5f68140a75490f0001ee8763","role_id":"5f68140875490f0001ee8670","permission_id":"5f68140875490f0001ee867f"},{"id":"5f68140a75490f0001ee8764","role_id":"5f68140875490f0001ee8670","permission_id":"5f68140875490f0001ee8680"},{"id":"5f68140a75490f0001ee8765","role_id":"5f68140875490f0001ee8670","permission_id":"5f68140875490f0001ee8681"},{"id":"5f68140a75490f0001ee8766","role_id":"5f68140875490f0001ee8670","permission_id":"5f68140875490f0001ee8682"},{"id":"5f68140a75490f0001ee8767","role_id":"5f68140875490f0001ee8670","permission_id":"5f68140875490f0001ee86b3"},{"id":"5f68140a75490f0001ee8768","role_id":"5f68140875490f0001ee8670","permission_id":"5f68140875490f0001ee8683"},{"id":"5f68140a75490f0001ee8769","role_id":"5f68140875490f0001ee8670","permission_id":"5f68140875490f0001ee8684"},{"id":"5f68140a75490f0001ee876a","role_id":"5f68140875490f0001ee8670","permission_id":"5f68140875490f0001ee8686"},{"id":"5f68140a75490f0001ee876b","role_id":"5f68140875490f0001ee8670","permission_id":"5f68140875490f0001ee8687"},{"id":"5f68140a75490f0001ee876c","role_id":"5f68140875490f0001ee8670","permission_id":"5f68140875490f0001ee8688"},{"id":"5f68140a75490f0001ee876d","role_id":"5f68140875490f0001ee8670","permission_id":"5f68140875490f0001ee8689"},{"id":"5f68140a75490f0001ee876e","role_id":"5f68140875490f0001ee8670","permission_id":"5f68140875490f0001ee868a"},{"id":"5f68140a75490f0001ee876f","role_id":"5f68140875490f0001ee8670","permission_id":"5f68140875490f0001ee868b"},{"id":"5f68140a75490f0001ee8770","role_id":"5f68140875490f0001ee8670","permission_id":"5f68140875490f0001ee8692"},{"id":"5f68140a75490f0001ee8771","role_id":"5f68140875490f0001ee8670","permission_id":"5f68140875490f0001ee8693"},{"id":"5f68140a75490f0001ee8772","role_id":"5f68140875490f0001ee8670","permission_id":"5f68140875490f0001ee8694"},{"id":"5f68140a75490f0001ee8773","role_id":"5f68140875490f0001ee8670","permission_id":"5f68140875490f0001ee8695"},{"id":"5f68140a75490f0001ee8774","role_id":"5f68140875490f0001ee8670","permission_id":"5f68140875490f0001ee8696"},{"id":"5f68140a75490f0001ee8775","role_id":"5f68140875490f0001ee8670","permission_id":"5f68140875490f0001ee8697"},{"id":"5f68140a75490f0001ee8776","role_id":"5f68140875490f0001ee8670","permission_id":"5f68140875490f0001ee8698"},{"id":"5f68140a75490f0001ee8777","role_id":"5f68140875490f0001ee8670","permission_id":"5f68140875490f0001ee8699"},{"id":"5f68140a75490f0001ee8778","role_id":"5f68140875490f0001ee8670","permission_id":"5f68140875490f0001ee869a"},{"id":"5f68140a75490f0001ee8779","role_id":"5f68140875490f0001ee8670","permission_id":"5f68140875490f0001ee869b"},{"id":"5f68140a75490f0001ee877a","role_id":"5f68140875490f0001ee8670","permission_id":"5f68140875490f0001ee869c"},{"id":"5f68140a75490f0001ee877b","role_id":"5f68140875490f0001ee8670","permission_id":"5f68140875490f0001ee869d"},{"id":"5f68140a75490f0001ee877c","role_id":"5f68140875490f0001ee8670","permission_id":"5f68140875490f0001ee868c"},{"id":"5f68140a75490f0001ee877d","role_id":"5f68140875490f0001ee8670","permission_id":"5f68140875490f0001ee86b5"},{"id":"5f68140a75490f0001ee877e","role_id":"5f68140875490f0001ee8670","permission_id":"5f68140875490f0001ee86b6"},{"id":"5f68140a75490f0001ee877f","role_id":"5f68140875490f0001ee8670","permission_id":"5f68140875490f0001ee86b7"},{"id":"5f68140a75490f0001ee8780","role_id":"5f68140875490f0001ee8670","permission_id":"5f68140875490f0001ee86b8"},{"id":"5f68140a75490f0001ee8781","role_id":"5f68140875490f0001ee8670","permission_id":"5f68140875490f0001ee86b9"},{"id":"5f68140a75490f0001ee8782","role_id":"5f68140875490f0001ee8671","permission_id":"5f68140875490f0001ee867e"},{"id":"5f68140a75490f0001ee8783","role_id":"5f68140875490f0001ee8671","permission_id":"5f68140875490f0001ee867f"},{"id":"5f68140a75490f0001ee8784","role_id":"5f68140875490f0001ee8671","permission_id":"5f68140875490f0001ee8681"},{"id":"5f68140a75490f0001ee8785","role_id":"5f68140875490f0001ee8671","permission_id":"5f68140875490f0001ee8683"},{"id":"5f68140a75490f0001ee8786","role_id":"5f68140875490f0001ee8671","permission_id":"5f68140875490f0001ee8684"},{"id":"5f68140a75490f0001ee8787","role_id":"5f68140875490f0001ee8671","permission_id":"5f68140875490f0001ee8686"},{"id":"5f68140a75490f0001ee8788","role_id":"5f68140875490f0001ee8671","permission_id":"5f68140875490f0001ee8687"},{"id":"5f68140a75490f0001ee8789","role_id":"5f68140875490f0001ee8671","permission_id":"5f68140875490f0001ee8688"},{"id":"5f68140a75490f0001ee878a","role_id":"5f68140875490f0001ee8671","permission_id":"5f68140875490f0001ee868a"},{"id":"5f68140a75490f0001ee878b","role_id":"5f68140875490f0001ee8671","permission_id":"5f68140875490f0001ee8692"},{"id":"5f68140a75490f0001ee878c","role_id":"5f68140875490f0001ee8671","permission_id":"5f68140875490f0001ee8693"},{"id":"5f68140a75490f0001ee878d","role_id":"5f68140875490f0001ee8671","permission_id":"5f68140875490f0001ee8698"},{"id":"5f68140a75490f0001ee878e","role_id":"5f68140875490f0001ee8671","permission_id":"5f68140875490f0001ee868c"},{"id":"5f68140a75490f0001ee878f","role_id":"5f68140875490f0001ee8671","permission_id":"5f68140875490f0001ee86b5"},{"id":"5f68140a75490f0001ee8790","role_id":"5f68140875490f0001ee8671","permission_id":"5f68140875490f0001ee86b8"},{"id":"5f68140a75490f0001ee8791","role_id":"5f68140875490f0001ee8672","permission_id":"5f68140875490f0001ee867e"},{"id":"5f68140a75490f0001ee8792","role_id":"5f68140875490f0001ee8672","permission_id":"5f68140875490f0001ee867f"},{"id":"5f68140a75490f0001ee8793","role_id":"5f68140875490f0001ee8672","permission_id":"5f68140875490f0001ee8681"},{"id":"5f68140a75490f0001ee8794","role_id":"5f68140875490f0001ee8672","permission_id":"5f68140875490f0001ee8683"},{"id":"5f68140a75490f0001ee8795","role_id":"5f68140875490f0001ee8672","permission_id":"5f68140875490f0001ee8684"},{"id":"5f68140a75490f0001ee8796","role_id":"5f68140875490f0001ee8672","permission_id":"5f68140875490f0001ee8686"},{"id":"5f68140a75490f0001ee8797","role_id":"5f68140875490f0001ee8672","permission_id":"5f68140875490f0001ee8687"},{"id":"5f68140a75490f0001ee8798","role_id":"5f68140875490f0001ee8672","permission_id":"5f68140875490f0001ee8688"},{"id":"5f68140a75490f0001ee8799","role_id":"5f68140875490f0001ee8672","permission_id":"5f68140875490f0001ee8692"},{"id":"5f68140a75490f0001ee879a","role_id":"5f68140875490f0001ee8672","permission_id":"5f68140875490f0001ee8693"},{"id":"5f68140a75490f0001ee879b","role_id":"5f68140875490f0001ee8672","permission_id":"5f68140875490f0001ee8698"},{"id":"5f68140a75490f0001ee879c","role_id":"5f68140875490f0001ee8672","permission_id":"5f68140875490f0001ee868c"},{"id":"5f68140a75490f0001ee879d","role_id":"5f68140875490f0001ee8672","permission_id":"5f68140875490f0001ee86b5"},{"id":"5f68140a75490f0001ee879e","role_id":"5f68140875490f0001ee8672","permission_id":"5f68140875490f0001ee86b8"}],"permissions_apps":[],"settings":[{"id":"5f68140a75490f0001ee87a7","group":"core","key":"db_hash","value":"e3cb69a9-5578-4481-a033-77940e95fee2","type":"string","flags":null,"created_at":"2020-09-21 02:46:35","updated_at":"2020-09-21 02:46:35"},{"id":"5f68140a75490f0001ee87a8","group":"core","key":"routes_hash","value":null,"type":"string","flags":null,"created_at":"2020-09-21 02:46:35","updated_at":"2020-09-21 02:46:35"},{"id":"5f68140a75490f0001ee87a9","group":"core","key":"next_update_check","value":"1600851753","type":"number","flags":null,"created_at":"2020-09-21 02:46:35","updated_at":"2020-09-22 09:02:33"},{"id":"5f68140a75490f0001ee87aa","group":"core","key":"notifications","value":"[{\"dismissible\":true,\"location\":\"bottom\",\"status\":\"alert\",\"id\":\"e1ca4330-f67f-11ea-88d7-4fd645b0cd50\",\"custom\":false,\"createdAt\":\"2020-09-14T10:46:09.000Z\",\"type\":\"info\",\"top\":false,\"message\":\"Ghost <a href=\\\"https://github.com/TryGhost/Ghost/releases\\\">3.33.0</a> has been released, <a href=\\\"https://ghost.org/update/?v=3.32.1\\\">click here</a> to upgrade.\",\"seen\":false,\"addedAt\":\"2020-09-21T03:21:15.920Z\"}]","type":"array","flags":null,"created_at":"2020-09-21 02:46:35","updated_at":"2020-09-21 03:21:15"},{"id":"5f68140a75490f0001ee87ab","group":"core","key":"session_secret","value":"e03da3c067c011147c23b22243bd7dc2280805588ca8ee6481098f0e5914e443","type":"string","flags":null,"created_at":"2020-09-21 02:46:35","updated_at":"2020-09-21 02:46:35"},{"id":"5f68140a75490f0001ee87ac","group":"core","key":"theme_session_secret","value":"97d88ab0c437d2893b6342b8d12783ecfa32109b847ba8f04f56d5fd9bb739e0","type":"string","flags":null,"created_at":"2020-09-21 02:46:35","updated_at":"2020-09-21 02:46:35"},{"id":"5f68140b75490f0001ee87ad","group":"core","key":"ghost_public_key","value":"-----BEGIN RSA PUBLIC KEY-----\nMIGJAoGBAIWO/QOa5WYMyGKdk+BFkbPp2kJqckvkMeMQbnHxe82VydLlVKLeRI1MfX+VPdjb\n7X2j7yQKte6npfDu+vy3CowdramCu791JyQI2SqzE7hXWuPiqn52mBjGPux7/OWOlISrjPv1\nqD8wPxEc8e8DqhJFiFzk8oxOV4G2S2OplNeFAgMBAAE=\n-----END RSA PUBLIC KEY-----\n","type":"string","flags":null,"created_at":"2020-09-21 02:46:35","updated_at":"2020-09-21 02:46:35"},{"id":"5f68140b75490f0001ee87ae","group":"core","key":"ghost_private_key","value":"-----BEGIN RSA PRIVATE KEY-----\nMIICXgIBAAKBgQCFjv0DmuVmDMhinZPgRZGz6dpCanJL5DHjEG5x8XvNlcnS5VSi3kSNTH1/\nlT3Y2+19o+8kCrXup6Xw7vr8twqMHa2pgru/dSckCNkqsxO4V1rj4qp+dpgYxj7se/zljpSE\nq4z79ag/MD8RHPHvA6oSRYhc5PKMTleBtktjqZTXhQIDAQABAoGAVdKRUTy6xj3WklAR0x7B\nRuwxvVXrhkrnp7JKVlvHo07qduO45EORp36McmxzZqPEU2UBaZacW/RM1Kqsi7IPSxG9i0J3\nKf9Vc90yitT/Wem4/BHTLIcaXbz9IKKyl7Y3eNUOgcjy2BInTXQGKcb7Az8bETsz/Ad6Nc5x\nKjl5GCECQQDiqfMX+4yogxrnkv14+iltXiRZEgYlju9qM7BlByJBbqqlVPdb4AbpfpHGfTVw\nw7Y+2EpNIhXFFyZWV341vzwNAkEAltgugufasGOzntZJ35o2WCAIAtZhmqny8HFAuQ1SeO1G\nczq3zB4VfKg+vEYEFoC7OICYMW0moesFFMNgbjQTWQJBAM7rPtSB+2JKbWFCOssZ9H+3FY+K\neLoIxl85WKqh3I/HK1lLO5VP6n914DZHT2XmBJVSdmH738vQ2lqv/LOsJHECQQAOGZsPZXjN\nsCQkHse8/P9DcYsOKNfqyyQIUa3JHnOtFhDVyJFRpSZBBsEGfEz5hYL6nxqa1CceT4ekDzc+\nVePRAkEA4HBqiLB4Vtr+TUMtT4vURwR5mejeIEfMDs1GaYxqocW1RLNRAv8t4eEREEudCa0e\noDL31D57SMZPnBZnDLpE0g==\n-----END RSA PRIVATE KEY-----\n","type":"string","flags":null,"created_at":"2020-09-21 02:46:35","updated_at":"2020-09-21 02:46:35"},{"id":"5f68140b75490f0001ee87af","group":"core","key":"members_public_key","value":"-----BEGIN RSA PUBLIC KEY-----\nMIGJAoGBAMmvQrMkN3fpqAGw0EUyvkBzbAqHNutnzaE0nKIC2jvH/W0HXEX8v53Nh5BeUn1J\n2njZlKROrZqCv+8aAwKdDh6h5eiWeb4RYILcieGo32zGwvugxK0gdLLFVi/Uj3kYjevop9ZL\nBt+DRx91FEwA46eiDsrLKwR+pLY+iCQbpOpLAgMBAAE=\n-----END RSA PUBLIC KEY-----\n","type":"string","flags":null,"created_at":"2020-09-21 02:46:35","updated_at":"2020-09-21 02:46:35"},{"id":"5f68140b75490f0001ee87b0","group":"core","key":"members_private_key","value":"-----BEGIN RSA PRIVATE KEY-----\nMIICXQIBAAKBgQDJr0KzJDd36agBsNBFMr5Ac2wKhzbrZ82hNJyiAto7x/1tB1xF/L+dzYeQ\nXlJ9Sdp42ZSkTq2agr/vGgMCnQ4eoeXolnm+EWCC3InhqN9sxsL7oMStIHSyxVYv1I95GI3r\n6KfWSwbfg0cfdRRMAOOnog7KyysEfqS2PogkG6TqSwIDAQABAoGABGziC8g5p1nrI85bY4lP\nf16I+lopLFUkv+rFnRBu9WzX9LJ6pdZ75dyCovpO2QzrzEcJ6ekICiHgUEDD3CTSEHQCNcO/\nJQbUe0AQYvdcocYojwo+aYUh/8J2uMMtTvk7r79KIYagt13yi1zPP5uQ2LI8D1kkR0eMEp1b\ntOMCnVECQQDzXsgtMHfKf89prQNKLi5snJFPzt51I+QpxvCrrH03bZzjIEugmDfqX7+F8Ygj\n/sTlrPgdbw5f6NYXQNMl7I2fAkEA1CatajFID8cNE4GJUZcMuHGvP0FU+ygO+GcmnDv4OPP7\n417OiUbHKuZt72IRVjnvXHhUESN/Ovon0iAbbLrL1QJBALV9JFiWwW6Qu7N5428pW1OButfC\nVKEUn+0Lv6S2oDZ6lrnF9sAPY/tzZddUVItLTbhdsjX5AMZDU4zJueyZKM8CQHQ8OLk9BRF3\n6scsKtNkIhkQWIccwXXWLdWVlob1KHvz2adqs1htSgRMOiF1JrCKj4Wne8/kFfp3QsgSxVPe\nSH0CQQC5e8g82P9jrfQ6Yf7wlD2mR83hymEbcB4D8oK3FAmW7UnoBLaeGxsSFt7s+r3CbYqY\nMxVJQFdHRyT0AY1CBjGP\n-----END RSA PRIVATE KEY-----\n","type":"string","flags":null,"created_at":"2020-09-21 02:46:35","updated_at":"2020-09-21 02:46:35"},{"id":"5f68140b75490f0001ee87b1","group":"core","key":"members_email_auth_secret","value":"b8f164a71a6a5c5a5096a4e22990405a8996ba3a9f42e7a2224111a248f45921168206423152997eae8aa44e65d16aa77352a08d70ffa2188ec59fea28b55191","type":"string","flags":null,"created_at":"2020-09-21 02:46:35","updated_at":"2020-09-21 02:46:35"},{"id":"5f68140b75490f0001ee87b2","group":"core","key":"members_stripe_webhook_id","value":null,"type":"string","flags":null,"created_at":"2020-09-21 02:46:35","updated_at":"2020-09-21 02:46:35"},{"id":"5f68140b75490f0001ee87b3","group":"core","key":"members_stripe_webhook_secret","value":null,"type":"string","flags":null,"created_at":"2020-09-21 02:46:35","updated_at":"2020-09-21 02:46:35"},{"id":"5f68140b75490f0001ee87b4","group":"site","key":"title","value":"八八九十一","type":"string","flags":"PUBLIC","created_at":"2020-09-10 10:12:35","updated_at":"2020-09-10 10:13:23"},{"id":"5f68140b75490f0001ee87b5","group":"site","key":"description","value":"来来来，瞅一瞅有没有你喜欢的。","type":"string","flags":"PUBLIC","created_at":"2020-09-10 10:12:35","updated_at":"2020-09-10 10:23:38"},{"id":"5f68140b75490f0001ee87b6","group":"site","key":"logo","value":"/content/images/2020/09/blog-logo-1.svg","type":"string","flags":null,"created_at":"2020-09-10 10:12:35","updated_at":"2020-09-10 10:20:52"},{"id":"5f68140b75490f0001ee87b7","group":"site","key":"cover_image","value":"https://static.ghost.org/v3.0.0/images/publication-cover.png","type":"string","flags":null,"created_at":"2020-09-10 10:12:35","updated_at":"2020-09-10 10:12:35"},{"id":"5f68140b75490f0001ee87b8","group":"site","key":"icon","value":null,"type":"string","flags":null,"created_at":"2020-09-10 10:12:35","updated_at":"2020-09-10 10:12:35"},{"id":"5f68140b75490f0001ee87b9","group":"site","key":"accent_color","value":null,"type":"string","flags":"PUBLIC","created_at":"2020-09-10 10:12:35","updated_at":"2020-09-10 10:18:54"},{"id":"5f68140b75490f0001ee87ba","group":"site","key":"lang","value":"zh-cn","type":"string","flags":null,"created_at":"2020-09-10 10:12:35","updated_at":"2020-09-10 10:23:45"},{"id":"5f68140b75490f0001ee87bb","group":"site","key":"timezone","value":"Etc/UTC","type":"string","flags":null,"created_at":"2020-09-10 10:12:35","updated_at":"2020-09-10 10:12:35"},{"id":"5f68140b75490f0001ee87bc","group":"site","key":"codeinjection_head","value":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.15.0/themes/prism.min.css\"></link>","type":"string","flags":null,"created_at":"2020-09-10 10:12:35","updated_at":"2020-09-10 10:18:54"},{"id":"5f68140b75490f0001ee87bd","group":"site","key":"codeinjection_foot","value":"<script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.15.0/prism.min.js\"></script>\n\n<script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.15.0/components/prism-java.min.js\"></script>\n<script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.15.0/components/prism-go.min.js\"></script>\n<script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.15.0/components/prism-graphql.min.js\"></script>","type":"string","flags":null,"created_at":"2020-09-10 10:12:35","updated_at":"2020-09-10 10:18:54"},{"id":"5f68140b75490f0001ee87be","group":"site","key":"facebook","value":"ghost","type":"string","flags":null,"created_at":"2020-09-10 10:12:35","updated_at":"2020-09-10 10:12:35"},{"id":"5f68140b75490f0001ee87bf","group":"site","key":"twitter","value":"@ghost","type":"string","flags":null,"created_at":"2020-09-10 10:12:35","updated_at":"2020-09-10 10:18:54"},{"id":"5f68140b75490f0001ee87c0","group":"site","key":"navigation","value":"[{\"label\":\"Home\",\"url\":\"/\"},{\"label\":\"Tag\",\"url\":\"/tag/getting-started/\"},{\"label\":\"Author\",\"url\":\"/author/link/\"}]","type":"array","flags":null,"created_at":"2020-09-10 10:12:35","updated_at":"2020-09-10 10:24:04"},{"id":"5f68140b75490f0001ee87c1","group":"site","key":"secondary_navigation","value":"[]","type":"array","flags":null,"created_at":"2020-09-10 10:12:35","updated_at":"2020-09-10 10:12:35"},{"id":"5f68140b75490f0001ee87c2","group":"site","key":"meta_title","value":null,"type":"string","flags":null,"created_at":"2020-09-10 10:12:35","updated_at":"2020-09-10 10:12:35"},{"id":"5f68140b75490f0001ee87c3","group":"site","key":"meta_description","value":null,"type":"string","flags":null,"created_at":"2020-09-10 10:12:35","updated_at":"2020-09-10 10:12:35"},{"id":"5f68140b75490f0001ee87c4","group":"site","key":"og_image","value":null,"type":"string","flags":null,"created_at":"2020-09-10 10:12:35","updated_at":"2020-09-10 10:12:35"},{"id":"5f68140b75490f0001ee87c5","group":"site","key":"og_title","value":null,"type":"string","flags":null,"created_at":"2020-09-10 10:12:35","updated_at":"2020-09-10 10:12:35"},{"id":"5f68140b75490f0001ee87c6","group":"site","key":"og_description","value":null,"type":"string","flags":null,"created_at":"2020-09-10 10:12:35","updated_at":"2020-09-10 10:12:35"},{"id":"5f68140b75490f0001ee87c7","group":"site","key":"twitter_image","value":null,"type":"string","flags":null,"created_at":"2020-09-10 10:12:35","updated_at":"2020-09-10 10:12:35"},{"id":"5f68140b75490f0001ee87c8","group":"site","key":"twitter_title","value":null,"type":"string","flags":null,"created_at":"2020-09-10 10:12:35","updated_at":"2020-09-10 10:12:35"},{"id":"5f68140b75490f0001ee87c9","group":"site","key":"twitter_description","value":null,"type":"string","flags":null,"created_at":"2020-09-10 10:12:35","updated_at":"2020-09-10 10:12:35"},{"id":"5f68140b75490f0001ee87ca","group":"theme","key":"active_theme","value":"casper","type":"string","flags":"RO","created_at":"2020-09-21 02:46:36","updated_at":"2020-09-21 02:46:36"},{"id":"5f68140b75490f0001ee87cb","group":"private","key":"is_private","value":"false","type":"boolean","flags":null,"created_at":"2020-09-21 02:46:36","updated_at":"2020-09-21 02:46:36"},{"id":"5f68140b75490f0001ee87cc","group":"private","key":"password","value":"","type":"string","flags":null,"created_at":"2020-09-21 02:46:36","updated_at":"2020-09-21 02:46:36"},{"id":"5f68140b75490f0001ee87cd","group":"private","key":"public_hash","value":"326763ce5206b01445b48f9b154f72","type":"string","flags":null,"created_at":"2020-09-10 10:12:35","updated_at":"2020-09-10 10:12:35"},{"id":"5f68140b75490f0001ee87ce","group":"members","key":"default_content_visibility","value":"public","type":"string","flags":null,"created_at":"2020-09-10 10:12:35","updated_at":"2020-09-10 10:12:35"},{"id":"5f68140b75490f0001ee87cf","group":"members","key":"members_allow_free_signup","value":"true","type":"boolean","flags":null,"created_at":"2020-09-10 10:12:35","updated_at":"2020-09-10 10:12:35"},{"id":"5f68140b75490f0001ee87d0","group":"members","key":"members_from_address","value":null,"type":"string","flags":"RO","created_at":"2020-09-10 10:12:35","updated_at":"2020-09-10 10:12:35"},{"id":"5f68140b75490f0001ee87d1","group":"members","key":"members_support_address","value":null,"type":"string","flags":"PUBLIC,RO","created_at":"2020-09-10 10:12:35","updated_at":"2020-09-10 10:12:35"},{"id":"5f68140b75490f0001ee87d2","group":"members","key":"members_reply_address","value":"newsletter","type":"string","flags":null,"created_at":"2020-09-10 10:12:35","updated_at":"2020-09-10 10:12:35"},{"id":"5f68140b75490f0001ee87d3","group":"members","key":"stripe_product_name","value":"Ghost Subscription","type":"string","flags":null,"created_at":"2020-09-10 10:12:35","updated_at":"2020-09-10 10:12:35"},{"id":"5f68140b75490f0001ee87d4","group":"members","key":"stripe_secret_key","value":null,"type":"string","flags":null,"created_at":"2020-09-10 10:12:35","updated_at":"2020-09-10 10:12:35"},{"id":"5f68140b75490f0001ee87d5","group":"members","key":"stripe_publishable_key","value":null,"type":"string","flags":null,"created_at":"2020-09-10 10:12:35","updated_at":"2020-09-10 10:12:35"},{"id":"5f68140b75490f0001ee87d6","group":"members","key":"stripe_plans","value":"[{\"name\":\"Monthly\",\"currency\":\"usd\",\"interval\":\"month\",\"amount\":500},{\"name\":\"Yearly\",\"currency\":\"usd\",\"interval\":\"year\",\"amount\":5000}]","type":"array","flags":null,"created_at":"2020-09-10 10:12:35","updated_at":"2020-09-10 10:12:35"},{"id":"5f68140b75490f0001ee87d7","group":"members","key":"stripe_connect_publishable_key","value":null,"type":"string","flags":null,"created_at":"2020-09-10 10:12:35","updated_at":"2020-09-10 10:12:35"},{"id":"5f68140b75490f0001ee87d8","group":"members","key":"stripe_connect_secret_key","value":null,"type":"string","flags":null,"created_at":"2020-09-10 10:12:35","updated_at":"2020-09-10 10:12:35"},{"id":"5f68140b75490f0001ee87d9","group":"members","key":"stripe_connect_livemode","value":null,"type":"boolean","flags":null,"created_at":"2020-09-10 10:12:35","updated_at":"2020-09-10 10:12:35"},{"id":"5f68140b75490f0001ee87da","group":"members","key":"stripe_connect_display_name","value":null,"type":"string","flags":null,"created_at":"2020-09-10 10:12:35","updated_at":"2020-09-10 10:12:35"},{"id":"5f68140b75490f0001ee87db","group":"members","key":"stripe_connect_account_id","value":null,"type":"string","flags":null,"created_at":"2020-09-10 10:12:35","updated_at":"2020-09-10 10:12:35"},{"id":"5f68140b75490f0001ee87dc","group":"portal","key":"portal_name","value":"true","type":"boolean","flags":null,"created_at":"2020-09-10 10:12:35","updated_at":"2020-09-10 10:12:35"},{"id":"5f68140b75490f0001ee87dd","group":"portal","key":"portal_button","value":"true","type":"boolean","flags":null,"created_at":"2020-09-10 10:12:35","updated_at":"2020-09-10 10:12:35"},{"id":"5f68140b75490f0001ee87de","group":"portal","key":"portal_plans","value":"[\"free\",\"monthly\",\"yearly\"]","type":"array","flags":null,"created_at":"2020-09-10 10:12:35","updated_at":"2020-09-10 10:18:54"},{"id":"5f68140b75490f0001ee87df","group":"portal","key":"portal_button_style","value":"icon-and-text","type":"string","flags":null,"created_at":"2020-09-10 10:12:35","updated_at":"2020-09-10 10:12:35"},{"id":"5f68140b75490f0001ee87e0","group":"portal","key":"portal_button_icon","value":null,"type":"string","flags":null,"created_at":"2020-09-10 10:12:35","updated_at":"2020-09-10 10:12:35"},{"id":"5f68140b75490f0001ee87e1","group":"portal","key":"portal_button_signup_text","value":"Subscribe","type":"string","flags":null,"created_at":"2020-09-10 10:12:35","updated_at":"2020-09-10 10:12:35"},{"id":"5f68140b75490f0001ee87e2","group":"email","key":"mailgun_domain","value":null,"type":"string","flags":null,"created_at":"2020-09-10 10:12:35","updated_at":"2020-09-10 10:12:35"},{"id":"5f68140b75490f0001ee87e3","group":"email","key":"mailgun_api_key","value":null,"type":"string","flags":null,"created_at":"2020-09-10 10:12:36","updated_at":"2020-09-10 10:12:36"},{"id":"5f68140b75490f0001ee87e4","group":"email","key":"mailgun_base_url","value":null,"type":"string","flags":null,"created_at":"2020-09-10 10:12:36","updated_at":"2020-09-10 10:12:36"},{"id":"5f68140b75490f0001ee87e5","group":"amp","key":"amp","value":"true","type":"boolean","flags":null,"created_at":"2020-09-10 10:12:36","updated_at":"2020-09-10 10:12:36"},{"id":"5f68140b75490f0001ee87e6","group":"amp","key":"amp_gtag_id","value":null,"type":"string","flags":null,"created_at":"2020-09-10 10:12:36","updated_at":"2020-09-10 10:12:36"},{"id":"5f68140b75490f0001ee87e7","group":"labs","key":"labs","value":"{}","type":"object","flags":null,"created_at":"2020-09-10 10:12:36","updated_at":"2020-09-10 10:12:36"},{"id":"5f68140b75490f0001ee87e8","group":"slack","key":"slack","value":"[{\"url\":\"\"}]","type":"array","flags":null,"created_at":"2020-09-10 10:12:36","updated_at":"2020-09-10 10:18:54"},{"id":"5f68140b75490f0001ee87e9","group":"unsplash","key":"unsplash","value":"{\"isActive\":true}","type":"object","flags":null,"created_at":"2020-09-10 10:12:36","updated_at":"2020-09-10 10:18:54"},{"id":"5f68140b75490f0001ee87ea","group":"views","key":"shared_views","value":"[]","type":"array","flags":null,"created_at":"2020-09-10 10:12:36","updated_at":"2020-09-10 10:12:36"}],"tags":[{"id":"5f68140875490f0001ee866e","name":"Getting Started","slug":"getting-started","description":null,"feature_image":null,"parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2020-09-21 02:46:32","updated_at":"2020-09-21 02:46:32"},{"id":"5f681e8504f4220001a8d8a0","name":"Promise","slug":"promise","description":null,"feature_image":null,"parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2020-09-10 10:15:09","updated_at":"2020-09-10 10:15:09"},{"id":"5f681e8504f4220001a8d8a1","name":"Vue","slug":"vue","description":null,"feature_image":null,"parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2020-09-10 10:27:47","updated_at":"2020-09-10 10:27:47"},{"id":"5f69be5204f4220001a8d8bc","name":"Docker","slug":"docker","description":null,"feature_image":null,"parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2020-09-22 09:05:22","updated_at":"2020-09-22 09:05:22"},{"id":"5f69befc04f4220001a8d8c9","name":"Sentry","slug":"sentry","description":null,"feature_image":null,"parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2020-09-22 09:08:12","updated_at":"2020-09-22 09:08:12"},{"id":"5f69bf5a04f4220001a8d8d8","name":"Centos","slug":"centos","description":null,"feature_image":null,"parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2020-09-22 09:09:46","updated_at":"2020-09-22 09:09:46"},{"id":"5f69c09c04f4220001a8d8f7","name":"N2n","slug":"n2n","description":null,"feature_image":null,"parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2020-09-22 09:15:08","updated_at":"2020-09-22 09:15:08"},{"id":"5f69c0f604f4220001a8d903","name":"Shell","slug":"shell","description":null,"feature_image":null,"parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2020-09-22 09:16:38","updated_at":"2020-09-22 09:16:38"},{"id":"5f69c15704f4220001a8d914","name":"React","slug":"react","description":null,"feature_image":null,"parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2020-09-22 09:18:15","updated_at":"2020-09-22 09:18:15"},{"id":"5f69c15704f4220001a8d915","name":"Svelte","slug":"svelte","description":null,"feature_image":null,"parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2020-09-22 09:18:15","updated_at":"2020-09-22 09:18:15"}],"posts_tags":[{"id":"5f681e8504f4220001a8d8a4","post_id":"5f681e8504f4220001a8d8a2","tag_id":"5f681e8504f4220001a8d8a0","sort_order":0},{"id":"5f681e8504f4220001a8d8a5","post_id":"5f681e8504f4220001a8d8a2","tag_id":"5f68140875490f0001ee866e","sort_order":1},{"id":"5f681e8504f4220001a8d8a9","post_id":"5f681e8504f4220001a8d8a3","tag_id":"5f681e8504f4220001a8d8a1","sort_order":0},{"id":"5f69be5204f4220001a8d8bd","post_id":"5f69be3104f4220001a8d8b5","tag_id":"5f69be5204f4220001a8d8bc","sort_order":0},{"id":"5f69befc04f4220001a8d8ca","post_id":"5f69bedb04f4220001a8d8c4","tag_id":"5f69befc04f4220001a8d8c9","sort_order":0},{"id":"5f69befc04f4220001a8d8cb","post_id":"5f69bedb04f4220001a8d8c4","tag_id":"5f681e8504f4220001a8d8a1","sort_order":1},{"id":"5f69bf5a04f4220001a8d8d9","post_id":"5f69bf4204f4220001a8d8d4","tag_id":"5f69bf5a04f4220001a8d8d8","sort_order":0},{"id":"5f69c05104f4220001a8d8e9","post_id":"5f69bff204f4220001a8d8e1","tag_id":"5f69be5204f4220001a8d8bc","sort_order":0},{"id":"5f69c09c04f4220001a8d8f8","post_id":"5f69c07204f4220001a8d8ee","tag_id":"5f69c09c04f4220001a8d8f7","sort_order":0},{"id":"5f69c0f604f4220001a8d904","post_id":"5f69c0b904f4220001a8d8fc","tag_id":"5f69c0f604f4220001a8d903","sort_order":0},{"id":"5f69c0f604f4220001a8d905","post_id":"5f69c0b904f4220001a8d8fc","tag_id":"5f69bf5a04f4220001a8d8d8","sort_order":1},{"id":"5f69c15704f4220001a8d916","post_id":"5f69c13304f4220001a8d90d","tag_id":"5f69c15704f4220001a8d914","sort_order":0},{"id":"5f69c15704f4220001a8d917","post_id":"5f69c13304f4220001a8d90d","tag_id":"5f681e8504f4220001a8d8a1","sort_order":1},{"id":"5f69c15704f4220001a8d918","post_id":"5f69c13304f4220001a8d90d","tag_id":"5f69c15704f4220001a8d915","sort_order":2}],"apps":[],"app_settings":[],"app_fields":[],"invites":[],"brute":[{"key":"CD0wOIxTtQijRzTmmsKklIU8F1k0AEEIkt8rns72Z0o=","firstRequest":1600659012225,"lastRequest":1600659012225,"lifetime":1600662612234,"count":1}],"webhooks":[],"integrations":[{"id":"5f68140a75490f0001ee86d1","type":"builtin","name":"Zapier","slug":"zapier","icon_image":null,"description":"Built-in Zapier integration","created_at":"2020-09-21 02:46:34","updated_at":"2020-09-21 02:46:34"},{"id":"5f68140a75490f0001ee86d3","type":"internal","name":"Ghost Backup","slug":"ghost-backup","icon_image":null,"description":"Internal DB Backup integration","created_at":"2020-09-21 02:46:34","updated_at":"2020-09-21 02:46:34"},{"id":"5f68140a75490f0001ee86d5","type":"internal","name":"Ghost Scheduler","slug":"ghost-scheduler","icon_image":null,"description":"Internal Scheduler integration","created_at":"2020-09-21 02:46:34","updated_at":"2020-09-21 02:46:34"}],"api_keys":[{"id":"5f68140a75490f0001ee86d2","type":"admin","secret":"15a9431d8d3b21a1290e6c858bd6323221e5dbce5cd2aec5a24bfb15e3debd9b","role_id":"5f68140875490f0001ee8674","integration_id":"5f68140a75490f0001ee86d1","last_seen_at":null,"last_seen_version":null,"created_at":1600656394054,"updated_at":1600656394054},{"id":"5f68140a75490f0001ee86d4","type":"admin","secret":"273ee69c22e05a94fb21ac649944d99c110676f78ea7712e4fdf86fa3952ba3e","role_id":"5f68140875490f0001ee8675","integration_id":"5f68140a75490f0001ee86d3","last_seen_at":null,"last_seen_version":null,"created_at":1600656394062,"updated_at":1600656394062},{"id":"5f68140a75490f0001ee86d6","type":"admin","secret":"6ae52524afc8d917976f28ad79899fb57765f4bea18290cd2bcdf0514103b78e","role_id":"5f68140875490f0001ee8676","integration_id":"5f68140a75490f0001ee86d5","last_seen_at":null,"last_seen_version":null,"created_at":1600656394069,"updated_at":1600656394069}],"members":[],"labels":[],"members_labels":[],"members_stripe_customers":[],"members_stripe_customers_subscriptions":[],"actions":[{"id":"5f69bdaa04f4220001a8d8ad","resource_id":"5f68140975490f0001ee86cf","resource_type":"post","actor_id":"1","actor_type":"user","event":"deleted","context":null,"created_at":"2020-09-22 09:02:34"},{"id":"5f69bdae04f4220001a8d8ae","resource_id":"5f68140975490f0001ee86cd","resource_type":"post","actor_id":"1","actor_type":"user","event":"deleted","context":null,"created_at":"2020-09-22 09:02:38"},{"id":"5f69bdb204f4220001a8d8af","resource_id":"5f68140975490f0001ee86cb","resource_type":"post","actor_id":"1","actor_type":"user","event":"deleted","context":null,"created_at":"2020-09-22 09:02:42"},{"id":"5f69bdb604f4220001a8d8b0","resource_id":"5f68140975490f0001ee86c9","resource_type":"post","actor_id":"1","actor_type":"user","event":"deleted","context":null,"created_at":"2020-09-22 09:02:46"},{"id":"5f69bdba04f4220001a8d8b1","resource_id":"5f68140975490f0001ee86c7","resource_type":"post","actor_id":"1","actor_type":"user","event":"deleted","context":null,"created_at":"2020-09-22 09:02:50"},{"id":"5f69bdbe04f4220001a8d8b2","resource_id":"5f68140975490f0001ee86c5","resource_type":"post","actor_id":"1","actor_type":"user","event":"deleted","context":null,"created_at":"2020-09-22 09:02:54"},{"id":"5f69bdc304f4220001a8d8b3","resource_id":"5f68140975490f0001ee86c3","resource_type":"post","actor_id":"1","actor_type":"user","event":"deleted","context":null,"created_at":"2020-09-22 09:02:59"},{"id":"5f69bdd204f4220001a8d8b4","resource_id":"5951f5fca366002ebd5dbef7","resource_type":"user","actor_id":"1","actor_type":"user","event":"deleted","context":null,"created_at":"2020-09-22 09:03:14"},{"id":"5f69be3104f4220001a8d8b8","resource_id":"5f69be3104f4220001a8d8b5","resource_type":"post","actor_id":"1","actor_type":"user","event":"added","context":null,"created_at":"2020-09-22 09:04:49"},{"id":"5f69be4004f4220001a8d8ba","resource_id":"5f69be3104f4220001a8d8b5","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-09-22 09:05:04"},{"id":"5f69be4704f4220001a8d8bb","resource_id":"5f69be3104f4220001a8d8b5","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-09-22 09:05:11"},{"id":"5f69be5204f4220001a8d8be","resource_id":"5f69be5204f4220001a8d8bc","resource_type":"tag","actor_id":"1","actor_type":"user","event":"added","context":null,"created_at":"2020-09-22 09:05:22"},{"id":"5f69be5204f4220001a8d8bf","resource_id":"5f69be3104f4220001a8d8b5","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-09-22 09:05:22"},{"id":"5f69be9004f4220001a8d8c0","resource_id":"5f69be3104f4220001a8d8b5","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-09-22 09:06:24"},{"id":"5f69bea204f4220001a8d8c2","resource_id":"5f69be3104f4220001a8d8b5","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-09-22 09:06:42"},{"id":"5f69bead04f4220001a8d8c3","resource_id":"5f69be3104f4220001a8d8b5","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-09-22 09:06:53"},{"id":"5f69bedb04f4220001a8d8c7","resource_id":"5f69bedb04f4220001a8d8c4","resource_type":"post","actor_id":"1","actor_type":"user","event":"added","context":null,"created_at":"2020-09-22 09:07:39"},{"id":"5f69bee204f4220001a8d8c8","resource_id":"5f69bedb04f4220001a8d8c4","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-09-22 09:07:46"},{"id":"5f69befc04f4220001a8d8cd","resource_id":"5f69befc04f4220001a8d8c9","resource_type":"tag","actor_id":"1","actor_type":"user","event":"added","context":null,"created_at":"2020-09-22 09:08:12"},{"id":"5f69befc04f4220001a8d8ce","resource_id":"5f69bedb04f4220001a8d8c4","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-09-22 09:08:12"},{"id":"5f69bf1304f4220001a8d8cf","resource_id":"5f69bedb04f4220001a8d8c4","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-09-22 09:08:35"},{"id":"5f69bf1c04f4220001a8d8d0","resource_id":"5f69bedb04f4220001a8d8c4","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-09-22 09:08:44"},{"id":"5f69bf2a04f4220001a8d8d2","resource_id":"5f69bedb04f4220001a8d8c4","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-09-22 09:08:58"},{"id":"5f69bf2e04f4220001a8d8d3","resource_id":"5f69bedb04f4220001a8d8c4","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-09-22 09:09:02"},{"id":"5f69bf4204f4220001a8d8d7","resource_id":"5f69bf4204f4220001a8d8d4","resource_type":"post","actor_id":"1","actor_type":"user","event":"added","context":null,"created_at":"2020-09-22 09:09:22"},{"id":"5f69bf5b04f4220001a8d8db","resource_id":"5f69bf5a04f4220001a8d8d8","resource_type":"tag","actor_id":"1","actor_type":"user","event":"added","context":null,"created_at":"2020-09-22 09:09:46"},{"id":"5f69bf5b04f4220001a8d8dc","resource_id":"5f69bf4204f4220001a8d8d4","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-09-22 09:09:47"},{"id":"5f69bfa704f4220001a8d8dd","resource_id":"5f69bf4204f4220001a8d8d4","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-09-22 09:11:03"},{"id":"5f69bfb304f4220001a8d8de","resource_id":"5f69bf4204f4220001a8d8d4","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-09-22 09:11:15"},{"id":"5f69bfcb04f4220001a8d8df","resource_id":"5f69bf4204f4220001a8d8d4","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-09-22 09:11:39"},{"id":"5f69bfd104f4220001a8d8e0","resource_id":"5f69bf4204f4220001a8d8d4","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-09-22 09:11:45"},{"id":"5f69bff204f4220001a8d8e4","resource_id":"5f69bff204f4220001a8d8e1","resource_type":"post","actor_id":"1","actor_type":"user","event":"added","context":null,"created_at":"2020-09-22 09:12:18"},{"id":"5f69c00004f4220001a8d8e5","resource_id":"5f69bff204f4220001a8d8e1","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-09-22 09:12:32"},{"id":"5f69c00d04f4220001a8d8e7","resource_id":"5f69bff204f4220001a8d8e1","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-09-22 09:12:45"},{"id":"5f69c03704f4220001a8d8e8","resource_id":"5f69bff204f4220001a8d8e1","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-09-22 09:13:27"},{"id":"5f69c05104f4220001a8d8eb","resource_id":"5f69bff204f4220001a8d8e1","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-09-22 09:13:53"},{"id":"5f69c05d04f4220001a8d8ec","resource_id":"5f69bff204f4220001a8d8e1","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-09-22 09:14:05"},{"id":"5f69c06004f4220001a8d8ed","resource_id":"5f69bff204f4220001a8d8e1","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-09-22 09:14:08"},{"id":"5f69c07204f4220001a8d8f1","resource_id":"5f69c07204f4220001a8d8ee","resource_type":"post","actor_id":"1","actor_type":"user","event":"added","context":null,"created_at":"2020-09-22 09:14:26"},{"id":"5f69c07604f4220001a8d8f3","resource_id":"5f69c07204f4220001a8d8ee","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-09-22 09:14:30"},{"id":"5f69c07f04f4220001a8d8f5","resource_id":"5f69c07204f4220001a8d8ee","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-09-22 09:14:39"},{"id":"5f69c08504f4220001a8d8f6","resource_id":"5f69c07204f4220001a8d8ee","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-09-22 09:14:45"},{"id":"5f69c09c04f4220001a8d8f9","resource_id":"5f69c09c04f4220001a8d8f7","resource_type":"tag","actor_id":"1","actor_type":"user","event":"added","context":null,"created_at":"2020-09-22 09:15:08"},{"id":"5f69c09c04f4220001a8d8fa","resource_id":"5f69c07204f4220001a8d8ee","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-09-22 09:15:08"},{"id":"5f69c09e04f4220001a8d8fb","resource_id":"5f69c07204f4220001a8d8ee","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-09-22 09:15:10"},{"id":"5f69c0b904f4220001a8d8ff","resource_id":"5f69c0b904f4220001a8d8fc","resource_type":"post","actor_id":"1","actor_type":"user","event":"added","context":null,"created_at":"2020-09-22 09:15:37"},{"id":"5f69c0da04f4220001a8d901","resource_id":"5f69c0b904f4220001a8d8fc","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-09-22 09:16:10"},{"id":"5f69c0e104f4220001a8d902","resource_id":"5f69c0b904f4220001a8d8fc","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-09-22 09:16:17"},{"id":"5f69c0f604f4220001a8d906","resource_id":"5f69c0f604f4220001a8d903","resource_type":"tag","actor_id":"1","actor_type":"user","event":"added","context":null,"created_at":"2020-09-22 09:16:38"},{"id":"5f69c0f604f4220001a8d907","resource_id":"5f69c0b904f4220001a8d8fc","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-09-22 09:16:38"},{"id":"5f69c10c04f4220001a8d909","resource_id":"5f69c0b904f4220001a8d8fc","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-09-22 09:17:00"},{"id":"5f69c11004f4220001a8d90a","resource_id":"5f69c0b904f4220001a8d8fc","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-09-22 09:17:04"},{"id":"5f69c11904f4220001a8d90b","resource_id":"5f69c0b904f4220001a8d8fc","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-09-22 09:17:13"},{"id":"5f69c11c04f4220001a8d90c","resource_id":"5f69c0b904f4220001a8d8fc","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-09-22 09:17:16"},{"id":"5f69c13304f4220001a8d910","resource_id":"5f69c13304f4220001a8d90d","resource_type":"post","actor_id":"1","actor_type":"user","event":"added","context":null,"created_at":"2020-09-22 09:17:39"},{"id":"5f69c14004f4220001a8d912","resource_id":"5f69c13304f4220001a8d90d","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-09-22 09:17:52"},{"id":"5f69c14604f4220001a8d913","resource_id":"5f69c13304f4220001a8d90d","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-09-22 09:17:58"},{"id":"5f69c15704f4220001a8d919","resource_id":"5f69c15704f4220001a8d914","resource_type":"tag","actor_id":"1","actor_type":"user","event":"added","context":null,"created_at":"2020-09-22 09:18:15"},{"id":"5f69c15704f4220001a8d91a","resource_id":"5f69c15704f4220001a8d915","resource_type":"tag","actor_id":"1","actor_type":"user","event":"added","context":null,"created_at":"2020-09-22 09:18:15"},{"id":"5f69c15704f4220001a8d91b","resource_id":"5f69c13304f4220001a8d90d","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-09-22 09:18:15"},{"id":"5f69c18304f4220001a8d91c","resource_id":"5f69c13304f4220001a8d90d","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-09-22 09:18:59"},{"id":"5f69c18b04f4220001a8d91e","resource_id":"5f69c13304f4220001a8d90d","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-09-22 09:19:07"},{"id":"5f69c19304f4220001a8d91f","resource_id":"5f69c13304f4220001a8d90d","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-09-22 09:19:15"},{"id":"5f69c19904f4220001a8d920","resource_id":"5f69c13304f4220001a8d90d","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-09-22 09:19:21"},{"id":"5f69c1e104f4220001a8d921","resource_id":"5f69c07204f4220001a8d8ee","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-09-22 09:20:33"},{"id":"5f69c20204f4220001a8d922","resource_id":"5f69c07204f4220001a8d8ee","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-09-22 09:21:06"},{"id":"5f69c20604f4220001a8d923","resource_id":"5f69c07204f4220001a8d8ee","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-09-22 09:21:10"},{"id":"5f69c28004f4220001a8d924","resource_id":"1","resource_type":"user","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-09-22 09:23:12"}],"emails":[]}}]}